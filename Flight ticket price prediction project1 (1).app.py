{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "4d896cac-76d0-439d-9ab8-6eaff1599f7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pandas in c:\\users\\prakash\\anaconda3\\lib\\site-packages (2.2.3)\n",
      "Requirement already satisfied: numpy in c:\\users\\prakash\\anaconda3\\lib\\site-packages (2.1.3)\n",
      "Requirement already satisfied: matplotlib in c:\\users\\prakash\\anaconda3\\lib\\site-packages (3.10.0)\n",
      "Requirement already satisfied: scikit-learn in c:\\users\\prakash\\anaconda3\\lib\\site-packages (1.6.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\prakash\\anaconda3\\lib\\site-packages (from pandas) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\prakash\\anaconda3\\lib\\site-packages (from pandas) (2024.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\prakash\\anaconda3\\lib\\site-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\prakash\\anaconda3\\lib\\site-packages (from matplotlib) (1.3.1)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\prakash\\anaconda3\\lib\\site-packages (from matplotlib) (0.11.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\prakash\\anaconda3\\lib\\site-packages (from matplotlib) (4.55.3)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\prakash\\anaconda3\\lib\\site-packages (from matplotlib) (1.4.8)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\prakash\\anaconda3\\lib\\site-packages (from matplotlib) (24.2)\n",
      "Requirement already satisfied: pillow>=8 in c:\\users\\prakash\\anaconda3\\lib\\site-packages (from matplotlib) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\prakash\\anaconda3\\lib\\site-packages (from matplotlib) (3.2.0)\n",
      "Requirement already satisfied: scipy>=1.6.0 in c:\\users\\prakash\\anaconda3\\lib\\site-packages (from scikit-learn) (1.15.3)\n",
      "Requirement already satisfied: joblib>=1.2.0 in c:\\users\\prakash\\anaconda3\\lib\\site-packages (from scikit-learn) (1.4.2)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in c:\\users\\prakash\\anaconda3\\lib\\site-packages (from scikit-learn) (3.5.0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\prakash\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install pandas numpy matplotlib scikit-learn "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "5ff87220-be19-4774-8074-c6c1ec4fb579",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "16aacb98-0c60-45fa-ad2a-418edc4f736b",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_excel('D:\\Flight_Ticket_Participant_Datasets-20190305T100527Z-001 (3)\\Flight_Ticket_Participant_Datasets\\Data_Train.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "afad0571-8fab-4f07-8c72-0b1348dc80ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>24/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>22:20</td>\n",
       "      <td>01:10 22 Mar</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>1/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>05:50</td>\n",
       "      <td>13:15</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>9/06/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>09:25</td>\n",
       "      <td>04:25 10 Jun</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>12/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>18:05</td>\n",
       "      <td>23:30</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>01/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>16:50</td>\n",
       "      <td>21:35</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline Date_of_Journey    Source Destination                  Route  \\\n",
       "0       IndiGo      24/03/2019  Banglore   New Delhi              BLR → DEL   \n",
       "1    Air India       1/05/2019   Kolkata    Banglore  CCU → IXR → BBI → BLR   \n",
       "2  Jet Airways       9/06/2019     Delhi      Cochin  DEL → LKO → BOM → COK   \n",
       "3       IndiGo      12/05/2019   Kolkata    Banglore        CCU → NAG → BLR   \n",
       "4       IndiGo      01/03/2019  Banglore   New Delhi        BLR → NAG → DEL   \n",
       "\n",
       "  Dep_Time  Arrival_Time Duration Total_Stops Additional_Info  Price  \n",
       "0    22:20  01:10 22 Mar   2h 50m    non-stop         No info   3897  \n",
       "1    05:50         13:15   7h 25m     2 stops         No info   7662  \n",
       "2    09:25  04:25 10 Jun      19h     2 stops         No info  13882  \n",
       "3    18:05         23:30   5h 25m      1 stop         No info   6218  \n",
       "4    16:50         21:35   4h 45m      1 stop         No info  13302  "
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "2c37423d-2672-4a9d-adec-673b90279ec1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10683 entries, 0 to 10682\n",
      "Data columns (total 11 columns):\n",
      " #   Column           Non-Null Count  Dtype \n",
      "---  ------           --------------  ----- \n",
      " 0   Airline          10683 non-null  object\n",
      " 1   Date_of_Journey  10683 non-null  object\n",
      " 2   Source           10683 non-null  object\n",
      " 3   Destination      10683 non-null  object\n",
      " 4   Route            10682 non-null  object\n",
      " 5   Dep_Time         10683 non-null  object\n",
      " 6   Arrival_Time     10683 non-null  object\n",
      " 7   Duration         10683 non-null  object\n",
      " 8   Total_Stops      10682 non-null  object\n",
      " 9   Additional_Info  10683 non-null  object\n",
      " 10  Price            10683 non-null  int64 \n",
      "dtypes: int64(1), object(10)\n",
      "memory usage: 918.2+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "cfb57c17-248c-470d-8456-1dda7ea81c7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10683, 11)"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "e527d8ac-dfea-4aa0-990a-ea0d6bd9e80e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Airline            10683\n",
       "Date_of_Journey    10683\n",
       "Source             10683\n",
       "Destination        10683\n",
       "Route              10682\n",
       "Dep_Time           10683\n",
       "Arrival_Time       10683\n",
       "Duration           10683\n",
       "Total_Stops        10682\n",
       "Additional_Info    10683\n",
       "Price              10683\n",
       "dtype: int64"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "71eab493-541d-458b-8682-460162fca962",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Airline            object\n",
       "Date_of_Journey    object\n",
       "Source             object\n",
       "Destination        object\n",
       "Route              object\n",
       "Dep_Time           object\n",
       "Arrival_Time       object\n",
       "Duration           object\n",
       "Total_Stops        object\n",
       "Additional_Info    object\n",
       "Price               int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "e82a851b-2356-4987-b4f5-2e1feec04770",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>10683.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>9087.064121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4611.359167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1759.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5277.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>8372.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>12373.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>79512.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Price\n",
       "count  10683.000000\n",
       "mean    9087.064121\n",
       "std     4611.359167\n",
       "min     1759.000000\n",
       "25%     5277.000000\n",
       "50%     8372.000000\n",
       "75%    12373.000000\n",
       "max    79512.000000"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "ef5321fe-976d-4d86-b0f5-435d94a60a7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Airline            0\n",
       "Date_of_Journey    0\n",
       "Source             0\n",
       "Destination        0\n",
       "Route              1\n",
       "Dep_Time           0\n",
       "Arrival_Time       0\n",
       "Duration           0\n",
       "Total_Stops        1\n",
       "Additional_Info    0\n",
       "Price              0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "d3a8f7f4-9177-4ca2-b646-55fbec88712b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9039</th>\n",
       "      <td>Air India</td>\n",
       "      <td>6/05/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>NaN</td>\n",
       "      <td>09:45</td>\n",
       "      <td>09:25 07 May</td>\n",
       "      <td>23h 40m</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No info</td>\n",
       "      <td>7480</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Airline Date_of_Journey Source Destination Route Dep_Time  \\\n",
       "9039  Air India       6/05/2019  Delhi      Cochin   NaN    09:45   \n",
       "\n",
       "      Arrival_Time Duration Total_Stops Additional_Info  Price  \n",
       "9039  09:25 07 May  23h 40m         NaN         No info   7480  "
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data['Route'].isna() | data['Total_Stops'].isna()]   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "61582561-e34d-4573-9dbe-f168a13f3741",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "fa24d844-0cf4-4734-831b-0389002e640b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Airline            0\n",
       "Date_of_Journey    0\n",
       "Source             0\n",
       "Destination        0\n",
       "Route              0\n",
       "Dep_Time           0\n",
       "Arrival_Time       0\n",
       "Duration           0\n",
       "Total_Stops        0\n",
       "Additional_Info    0\n",
       "Price              0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "b8e4323d-a4b4-4945-887f-a9ab541c0b2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Airline            10682\n",
       "Date_of_Journey    10682\n",
       "Source             10682\n",
       "Destination        10682\n",
       "Route              10682\n",
       "Dep_Time           10682\n",
       "Arrival_Time       10682\n",
       "Duration           10682\n",
       "Total_Stops        10682\n",
       "Additional_Info    10682\n",
       "Price              10682\n",
       "dtype: int64"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "29a64950-4535-432a-81c7-ebc84f9b42ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>24/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>22:20</td>\n",
       "      <td>01:10 22 Mar</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>1/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>05:50</td>\n",
       "      <td>13:15</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>9/06/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>09:25</td>\n",
       "      <td>04:25 10 Jun</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>12/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>18:05</td>\n",
       "      <td>23:30</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>01/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>16:50</td>\n",
       "      <td>21:35</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline Date_of_Journey    Source Destination                  Route  \\\n",
       "0       IndiGo      24/03/2019  Banglore   New Delhi              BLR → DEL   \n",
       "1    Air India       1/05/2019   Kolkata    Banglore  CCU → IXR → BBI → BLR   \n",
       "2  Jet Airways       9/06/2019     Delhi      Cochin  DEL → LKO → BOM → COK   \n",
       "3       IndiGo      12/05/2019   Kolkata    Banglore        CCU → NAG → BLR   \n",
       "4       IndiGo      01/03/2019  Banglore   New Delhi        BLR → NAG → DEL   \n",
       "\n",
       "  Dep_Time  Arrival_Time Duration Total_Stops Additional_Info  Price  \n",
       "0    22:20  01:10 22 Mar   2h 50m    non-stop         No info   3897  \n",
       "1    05:50         13:15   7h 25m     2 stops         No info   7662  \n",
       "2    09:25  04:25 10 Jun      19h     2 stops         No info  13882  \n",
       "3    18:05         23:30   5h 25m      1 stop         No info   6218  \n",
       "4    16:50         21:35   4h 45m      1 stop         No info  13302  "
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b824a1fd-b4c4-4185-8460-8314e28c2a75",
   "metadata": {},
   "source": [
    "# DURATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "5ebe3bd0-7893-44a7-8283-4754ad317d34",
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_duration(duration):\n",
    "    if len(duration.split()) == 2:\n",
    "        hours = int(duration.split()[0][: -1])\n",
    "        minutes = int(duration.split()[1][: -1])\n",
    "        return hours * 60 + minutes\n",
    "    else:\n",
    "        return int(duration[: -1]) * 60"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "440e9c49-680b-4f3f-8d64-ace552b152f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>24/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>22:20</td>\n",
       "      <td>01:10 22 Mar</td>\n",
       "      <td>170</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>1/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>05:50</td>\n",
       "      <td>13:15</td>\n",
       "      <td>445</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>9/06/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>09:25</td>\n",
       "      <td>04:25 10 Jun</td>\n",
       "      <td>1140</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>12/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>18:05</td>\n",
       "      <td>23:30</td>\n",
       "      <td>325</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>01/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>16:50</td>\n",
       "      <td>21:35</td>\n",
       "      <td>285</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline Date_of_Journey    Source Destination                  Route  \\\n",
       "0       IndiGo      24/03/2019  Banglore   New Delhi              BLR → DEL   \n",
       "1    Air India       1/05/2019   Kolkata    Banglore  CCU → IXR → BBI → BLR   \n",
       "2  Jet Airways       9/06/2019     Delhi      Cochin  DEL → LKO → BOM → COK   \n",
       "3       IndiGo      12/05/2019   Kolkata    Banglore        CCU → NAG → BLR   \n",
       "4       IndiGo      01/03/2019  Banglore   New Delhi        BLR → NAG → DEL   \n",
       "\n",
       "  Dep_Time  Arrival_Time  Duration Total_Stops Additional_Info  Price  \n",
       "0    22:20  01:10 22 Mar       170    non-stop         No info   3897  \n",
       "1    05:50         13:15       445     2 stops         No info   7662  \n",
       "2    09:25  04:25 10 Jun      1140     2 stops         No info  13882  \n",
       "3    18:05         23:30       325      1 stop         No info   6218  \n",
       "4    16:50         21:35       285      1 stop         No info  13302  "
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Duration'] = data['Duration'].apply(convert_duration) \n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bac70d4-3dca-4b93-b2ce-e3a6ad106923",
   "metadata": {},
   "source": [
    "# Departure And Arrival Time "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "03a595ab-58e0-4902-8d61-024a9ff327dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Prakash\\AppData\\Local\\Temp\\ipykernel_340\\3322212648.py:1: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  data['Dep_Time'] = pd.to_datetime(data['Dep_Time'])\n",
      "C:\\Users\\Prakash\\AppData\\Local\\Temp\\ipykernel_340\\3322212648.py:2: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  data['Arrival_Time'] = pd.to_datetime(data['Arrival_Time'])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Airline                    object\n",
       "Date_of_Journey            object\n",
       "Source                     object\n",
       "Destination                object\n",
       "Route                      object\n",
       "Dep_Time           datetime64[ns]\n",
       "Arrival_Time       datetime64[ns]\n",
       "Duration                    int64\n",
       "Total_Stops                object\n",
       "Additional_Info            object\n",
       "Price                       int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Dep_Time'] = pd.to_datetime(data['Dep_Time'])\n",
    "data['Arrival_Time'] = pd.to_datetime(data['Arrival_Time'])\n",
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "cf47674a-a47c-4d3d-a45e-6d3a35a57888",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Dep_Time_in_hours</th>\n",
       "      <th>Dep_Time_in_minutes</th>\n",
       "      <th>Arrival_Time_in_hours</th>\n",
       "      <th>Arrival_Time_in_minutes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>24/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>2025-07-31 22:20:00</td>\n",
       "      <td>2025-03-22 01:10:00</td>\n",
       "      <td>170</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>1/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>2025-07-31 05:50:00</td>\n",
       "      <td>2025-07-31 13:15:00</td>\n",
       "      <td>445</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>9/06/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>2025-07-31 09:25:00</td>\n",
       "      <td>2025-06-10 04:25:00</td>\n",
       "      <td>1140</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>12/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>2025-07-31 18:05:00</td>\n",
       "      <td>2025-07-31 23:30:00</td>\n",
       "      <td>325</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>01/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>2025-07-31 16:50:00</td>\n",
       "      <td>2025-07-31 21:35:00</td>\n",
       "      <td>285</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline Date_of_Journey    Source Destination                  Route  \\\n",
       "0       IndiGo      24/03/2019  Banglore   New Delhi              BLR → DEL   \n",
       "1    Air India       1/05/2019   Kolkata    Banglore  CCU → IXR → BBI → BLR   \n",
       "2  Jet Airways       9/06/2019     Delhi      Cochin  DEL → LKO → BOM → COK   \n",
       "3       IndiGo      12/05/2019   Kolkata    Banglore        CCU → NAG → BLR   \n",
       "4       IndiGo      01/03/2019  Banglore   New Delhi        BLR → NAG → DEL   \n",
       "\n",
       "             Dep_Time        Arrival_Time  Duration Total_Stops  \\\n",
       "0 2025-07-31 22:20:00 2025-03-22 01:10:00       170    non-stop   \n",
       "1 2025-07-31 05:50:00 2025-07-31 13:15:00       445     2 stops   \n",
       "2 2025-07-31 09:25:00 2025-06-10 04:25:00      1140     2 stops   \n",
       "3 2025-07-31 18:05:00 2025-07-31 23:30:00       325      1 stop   \n",
       "4 2025-07-31 16:50:00 2025-07-31 21:35:00       285      1 stop   \n",
       "\n",
       "  Additional_Info  Price  Dep_Time_in_hours  Dep_Time_in_minutes  \\\n",
       "0         No info   3897                 22                   20   \n",
       "1         No info   7662                  5                   50   \n",
       "2         No info  13882                  9                   25   \n",
       "3         No info   6218                 18                    5   \n",
       "4         No info  13302                 16                   50   \n",
       "\n",
       "   Arrival_Time_in_hours  Arrival_Time_in_minutes  \n",
       "0                      1                       10  \n",
       "1                     13                       15  \n",
       "2                      4                       25  \n",
       "3                     23                       30  \n",
       "4                     21                       35  "
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Dep_Time_in_hours'] = data['Dep_Time'].dt.hour\n",
    "data['Dep_Time_in_minutes'] = data['Dep_Time'].dt.minute\n",
    "data['Arrival_Time_in_hours'] = data['Arrival_Time'].dt.hour\n",
    "data['Arrival_Time_in_minutes'] = data['Arrival_Time'].dt.minute\n",
    "\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "9defff72-f242-43e1-ba70-7bee26fa0444",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Dep_Time_in_hour</th>\n",
       "      <th>Dep_Time_in_minute</th>\n",
       "      <th>Arrival_Time_in_hour</th>\n",
       "      <th>Arrival_Time_in_minute</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>24/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>170</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>1/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>445</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>9/06/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>1140</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>12/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>325</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>01/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>285</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline Date_of_Journey    Source Destination                  Route  \\\n",
       "0       IndiGo      24/03/2019  Banglore   New Delhi              BLR → DEL   \n",
       "1    Air India       1/05/2019   Kolkata    Banglore  CCU → IXR → BBI → BLR   \n",
       "2  Jet Airways       9/06/2019     Delhi      Cochin  DEL → LKO → BOM → COK   \n",
       "3       IndiGo      12/05/2019   Kolkata    Banglore        CCU → NAG → BLR   \n",
       "4       IndiGo      01/03/2019  Banglore   New Delhi        BLR → NAG → DEL   \n",
       "\n",
       "   Duration Total_Stops Additional_Info  Price  Dep_Time_in_hour  \\\n",
       "0       170    non-stop         No info   3897                22   \n",
       "1       445     2 stops         No info   7662                 5   \n",
       "2      1140     2 stops         No info  13882                 9   \n",
       "3       325      1 stop         No info   6218                18   \n",
       "4       285      1 stop         No info  13302                16   \n",
       "\n",
       "   Dep_Time_in_minute  Arrival_Time_in_hour  Arrival_Time_in_minute  \n",
       "0                  20                     1                      10  \n",
       "1                  50                    13                      15  \n",
       "2                  25                     4                      25  \n",
       "3                   5                    23                      30  \n",
       "4                  50                    21                      35  "
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.drop(['Dep_Time', 'Arrival_Time'], axis = 1, inplace = True)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cda11b3c-8cc6-4a43-8d97-f92b77ad2703",
   "metadata": {},
   "source": [
    "# DATE OF JOURNEY"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "fa75d225-c994-452f-b1fb-2a6c51df6049",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Airline', 'Date_of_Journey', 'Source', 'Destination', 'Route',\n",
      "       'Duration', 'Total_Stops', 'Additional_Info', 'Price',\n",
      "       'Dep_Time_in_hour', 'Dep_Time_in_minute', 'Arrival_Time_in_hour',\n",
      "       'Arrival_Time_in_minute'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(data.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "4de6e27c-132b-4b85-9d84-4779302fff22",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Prakash\\AppData\\Local\\Temp\\ipykernel_340\\1331629537.py:1: UserWarning: Parsing dates in %d/%m/%Y format when dayfirst=False (the default) was specified. Pass `dayfirst=True` or specify a format to silence this warning.\n",
      "  data['Date_of_Journey'] = pd.to_datetime(data['Date_of_Journey'])\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Dep_Time_in_hour</th>\n",
       "      <th>Dep_Time_in_minute</th>\n",
       "      <th>Arrival_Time_in_hour</th>\n",
       "      <th>Arrival_Time_in_minute</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2019-03-24</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>170</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>2019-05-01</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>445</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>2019-06-09</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>1140</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2019-05-12</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>325</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2019-03-01</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>285</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline Date_of_Journey    Source Destination                  Route  \\\n",
       "0       IndiGo      2019-03-24  Banglore   New Delhi              BLR → DEL   \n",
       "1    Air India      2019-05-01   Kolkata    Banglore  CCU → IXR → BBI → BLR   \n",
       "2  Jet Airways      2019-06-09     Delhi      Cochin  DEL → LKO → BOM → COK   \n",
       "3       IndiGo      2019-05-12   Kolkata    Banglore        CCU → NAG → BLR   \n",
       "4       IndiGo      2019-03-01  Banglore   New Delhi        BLR → NAG → DEL   \n",
       "\n",
       "   Duration Total_Stops Additional_Info  Price  Dep_Time_in_hour  \\\n",
       "0       170    non-stop         No info   3897                22   \n",
       "1       445     2 stops         No info   7662                 5   \n",
       "2      1140     2 stops         No info  13882                 9   \n",
       "3       325      1 stop         No info   6218                18   \n",
       "4       285      1 stop         No info  13302                16   \n",
       "\n",
       "   Dep_Time_in_minute  Arrival_Time_in_hour  Arrival_Time_in_minute  \n",
       "0                  20                     1                      10  \n",
       "1                  50                    13                      15  \n",
       "2                  25                     4                      25  \n",
       "3                   5                    23                      30  \n",
       "4                  50                    21                      35  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Date_of_Journey'] = pd.to_datetime(data['Date_of_Journey'])\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "d4571115-d721-4d93-b529-e420f3e77dd1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2019], dtype=int32)"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Date_of_Journey'].dt.year.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "461c8a59-2cc7-4184-bf72-49f5e7e6adcf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Dep_Time_in_hour</th>\n",
       "      <th>Dep_Time_in_minute</th>\n",
       "      <th>Arrival_Time_in_hour</th>\n",
       "      <th>Arrival_Time_in_minute</th>\n",
       "      <th>Day</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2019-03-24</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>170</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>2019-05-01</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>445</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>2019-06-09</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>1140</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2019-05-12</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>325</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2019-03-01</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>285</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline Date_of_Journey    Source Destination                  Route  \\\n",
       "0       IndiGo      2019-03-24  Banglore   New Delhi              BLR → DEL   \n",
       "1    Air India      2019-05-01   Kolkata    Banglore  CCU → IXR → BBI → BLR   \n",
       "2  Jet Airways      2019-06-09     Delhi      Cochin  DEL → LKO → BOM → COK   \n",
       "3       IndiGo      2019-05-12   Kolkata    Banglore        CCU → NAG → BLR   \n",
       "4       IndiGo      2019-03-01  Banglore   New Delhi        BLR → NAG → DEL   \n",
       "\n",
       "   Duration Total_Stops Additional_Info  Price  Dep_Time_in_hour  \\\n",
       "0       170    non-stop         No info   3897                22   \n",
       "1       445     2 stops         No info   7662                 5   \n",
       "2      1140     2 stops         No info  13882                 9   \n",
       "3       325      1 stop         No info   6218                18   \n",
       "4       285      1 stop         No info  13302                16   \n",
       "\n",
       "   Dep_Time_in_minute  Arrival_Time_in_hour  Arrival_Time_in_minute  Day  \\\n",
       "0                  20                     1                      10   24   \n",
       "1                  50                    13                      15    1   \n",
       "2                  25                     4                      25    9   \n",
       "3                   5                    23                      30   12   \n",
       "4                  50                    21                      35    1   \n",
       "\n",
       "   Month  \n",
       "0      3  \n",
       "1      5  \n",
       "2      6  \n",
       "3      5  \n",
       "4      3  "
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Day'] = data['Date_of_Journey'].dt.day\n",
    "data['Month'] = data['Date_of_Journey'].dt.month\n",
    "\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "ce25796e-5bea-4b49-bb65-bb388d9d8e8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Dep_Time_in_hour</th>\n",
       "      <th>Dep_Time_in_minute</th>\n",
       "      <th>Arrival_Time_in_hour</th>\n",
       "      <th>Arrival_Time_in_minute</th>\n",
       "      <th>Day</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>170</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>445</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>1140</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>325</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>285</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline    Source Destination                  Route  Duration  \\\n",
       "0       IndiGo  Banglore   New Delhi              BLR → DEL       170   \n",
       "1    Air India   Kolkata    Banglore  CCU → IXR → BBI → BLR       445   \n",
       "2  Jet Airways     Delhi      Cochin  DEL → LKO → BOM → COK      1140   \n",
       "3       IndiGo   Kolkata    Banglore        CCU → NAG → BLR       325   \n",
       "4       IndiGo  Banglore   New Delhi        BLR → NAG → DEL       285   \n",
       "\n",
       "  Total_Stops Additional_Info  Price  Dep_Time_in_hour  Dep_Time_in_minute  \\\n",
       "0    non-stop         No info   3897                22                  20   \n",
       "1     2 stops         No info   7662                 5                  50   \n",
       "2     2 stops         No info  13882                 9                  25   \n",
       "3      1 stop         No info   6218                18                   5   \n",
       "4      1 stop         No info  13302                16                  50   \n",
       "\n",
       "   Arrival_Time_in_hour  Arrival_Time_in_minute  Day  Month  \n",
       "0                     1                      10   24      3  \n",
       "1                    13                      15    1      5  \n",
       "2                     4                      25    9      6  \n",
       "3                    23                      30   12      5  \n",
       "4                    21                      35    1      3  "
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.drop('Date_of_Journey', axis = 1, inplace = True)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b11d6f3b-b53a-49d6-baa5-b54c88605a02",
   "metadata": {},
   "source": [
    "# TOTAL STOPS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "bb473090-9de9-4cb4-b158-231a92ef8005",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Total_Stops\n",
       "1 stop      5625\n",
       "non-stop    3491\n",
       "2 stops     1520\n",
       "3 stops       45\n",
       "4 stops        1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Total_Stops'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "684c4a02-79f3-4745-b21a-110e062806ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Total_Stops'] = data['Total_Stops'].str.extract('(\\d+)').fillna(0).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "997e2eeb-7902-4c3a-8727-8f6d067ebaf6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Dep_Time_in_hour</th>\n",
       "      <th>Dep_Time_in_minute</th>\n",
       "      <th>Arrival_Time_in_hour</th>\n",
       "      <th>Arrival_Time_in_minute</th>\n",
       "      <th>Day</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>170</td>\n",
       "      <td>0</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>445</td>\n",
       "      <td>2</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>1140</td>\n",
       "      <td>2</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>325</td>\n",
       "      <td>1</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>285</td>\n",
       "      <td>1</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline    Source Destination                  Route  Duration  \\\n",
       "0       IndiGo  Banglore   New Delhi              BLR → DEL       170   \n",
       "1    Air India   Kolkata    Banglore  CCU → IXR → BBI → BLR       445   \n",
       "2  Jet Airways     Delhi      Cochin  DEL → LKO → BOM → COK      1140   \n",
       "3       IndiGo   Kolkata    Banglore        CCU → NAG → BLR       325   \n",
       "4       IndiGo  Banglore   New Delhi        BLR → NAG → DEL       285   \n",
       "\n",
       "   Total_Stops Additional_Info  Price  Dep_Time_in_hour  Dep_Time_in_minute  \\\n",
       "0            0         No info   3897                22                  20   \n",
       "1            2         No info   7662                 5                  50   \n",
       "2            2         No info  13882                 9                  25   \n",
       "3            1         No info   6218                18                   5   \n",
       "4            1         No info  13302                16                  50   \n",
       "\n",
       "   Arrival_Time_in_hour  Arrival_Time_in_minute  Day  Month  \n",
       "0                     1                      10   24      3  \n",
       "1                    13                      15    1      5  \n",
       "2                     4                      25    9      6  \n",
       "3                    23                      30   12      5  \n",
       "4                    21                      35    1      3  "
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "54b040be-7a1f-42d1-acf5-c9b485252fb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Additional_Info\n",
       "No info                         8344\n",
       "In-flight meal not included     1982\n",
       "No check-in baggage included     320\n",
       "1 Long layover                    19\n",
       "Change airports                    7\n",
       "Business class                     4\n",
       "No Info                            3\n",
       "1 Short layover                    1\n",
       "Red-eye flight                     1\n",
       "2 Long layover                     1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Additional_Info'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "76cc7998-a532-46c2-adc9-e5284701a719",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Price</th>\n",
       "      <th>Dep_Time_in_hour</th>\n",
       "      <th>Dep_Time_in_minute</th>\n",
       "      <th>Arrival_Time_in_hour</th>\n",
       "      <th>Arrival_Time_in_minute</th>\n",
       "      <th>Day</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>170</td>\n",
       "      <td>0</td>\n",
       "      <td>3897</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>445</td>\n",
       "      <td>2</td>\n",
       "      <td>7662</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>1140</td>\n",
       "      <td>2</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>325</td>\n",
       "      <td>1</td>\n",
       "      <td>6218</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>285</td>\n",
       "      <td>1</td>\n",
       "      <td>13302</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline    Source Destination                  Route  Duration  \\\n",
       "0       IndiGo  Banglore   New Delhi              BLR → DEL       170   \n",
       "1    Air India   Kolkata    Banglore  CCU → IXR → BBI → BLR       445   \n",
       "2  Jet Airways     Delhi      Cochin  DEL → LKO → BOM → COK      1140   \n",
       "3       IndiGo   Kolkata    Banglore        CCU → NAG → BLR       325   \n",
       "4       IndiGo  Banglore   New Delhi        BLR → NAG → DEL       285   \n",
       "\n",
       "   Total_Stops  Price  Dep_Time_in_hour  Dep_Time_in_minute  \\\n",
       "0            0   3897                22                  20   \n",
       "1            2   7662                 5                  50   \n",
       "2            2  13882                 9                  25   \n",
       "3            1   6218                18                   5   \n",
       "4            1  13302                16                  50   \n",
       "\n",
       "   Arrival_Time_in_hour  Arrival_Time_in_minute  Day  Month  \n",
       "0                     1                      10   24      3  \n",
       "1                    13                      15    1      5  \n",
       "2                     4                      25    9      6  \n",
       "3                    23                      30   12      5  \n",
       "4                    21                      35    1      3  "
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.drop('Additional_Info', axis = 1, inplace = True)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "5ffd922f-a93a-4ee9-bbff-8110e1e93183",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Airline', 'Source', 'Destination', 'Route'], dtype='object')"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.select_dtypes(['object']).columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "648a8782-9f99-45c1-9b69-96b9735e686a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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veoAAAAAAKCE/qsQfeutt05ZWVnKysq+c9mWWrVq5ZprrllqxQEAAAAAQCn9VyH6+++/n8rKymy00UZ56aWXstZaaxWeq1GjRho1apSqVasu9SIBAAAAAKAU/qsQff3110+SLFy4cJkUAwAAAAAAK5L/KkT/pnfeeSfPPPNMpkyZskSo3qdPn/+5MAAAAAAAKLXvFaIPHjw4J5xwQtZcc800adIkZWVlhefKysqE6AAAAAAA/CB8rxD94osvziWXXJIzzjhjadcDAAAAAAArjCrf50XTpk3LgQceuLRrAQAAAACAFcr3CtEPPPDAPPbYY0u7FgAAAAAAWKF8r+VcNt5445x77rkZOXJkWrVqlerVqy/2fM+ePZdKcQAAAAAAUErfK0S/4YYbUqdOnQwfPjzDhw9f7LmysjIhOgAAAAAAPwjfK0R///33l3YdAAAAAACwwvlea6IDAAAAAMCq4HvNRD/yyCP/5fM333zz9yoGAAAAAABWJN8rRJ82bdpij+fPn5/XX389X3zxRXbbbbelUhgAAAAAAJTa9wrR77///iWOLVy4MD169MhGG230PxcFAAAAAAArgqW2JnqVKlVy0kkn5aqrrlpabwkAAAAAACW1VDcWfe+997JgwYKl+ZYAAAAAAFAy32s5l5NPPnmxx5WVlZk0aVL++te/5rDDDlsqhQEAAAAAQKl9rxD9b3/722KPq1SpkrXWWitXXHFFjjzyyKVSGAAAAAAAlNr3CtGffvrppV0HAAAAAACscL5XiL7IZ599lvHjx6esrCybbLJJ1lprraVVFwAAAAAAlNz32lj0yy+/zJFHHpm11147O++8c3baaac0bdo0Rx11VGbPnr20awQAAAAAgJL4XiH6ySefnOHDh+cvf/lLvvjii3zxxRd54IEHMnz48JxyyilLu0YAAAAAACiJ77Wcy3333Zc//vGPad++feHYnnvumVq1aqVr1665/vrrl1Z9AAAAAABQMt9rJvrs2bPTuHHjJY43atTIci4AAAAAAPxgfK8QvW3btjnvvPPy1VdfFY7NmTMnF1xwQdq2bbvUigMAAAAAgFL6Xsu5DBgwIJ07d866666brbbaKmVlZRkzZkxq1qyZxx57bGnXCAAAAAAAJfG9QvRWrVrl3Xffze2335633347lZWVOfjgg3PIIYekVq1aS7tGAAAAAAAoie8V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HoI5KLGFCxemZs2aWbhwYU477bTUrFkz77zzTvr375/GjRunc+fOximL8c2Klc7bb7+dAw88MOPHjy8cu+yyy7L//vtn7733zvPPP58k6dKlS/r3758+ffpk6NChSdyGDqW06AvIOeeck1tvvTXXX3993njjjey8887p3bt3Ro4cWeIKYdXz0Ucf5eOPP07yf2P0oYceyssvv5xu3brlvvvuy3XXXZdHHnkkr732Wo4//vhSlgv8f4sC9C5duuSyyy7L008/nTvuuCO77bZbvvzyy1SpUsVt6FAiCxcuTEVFxRLH77333jRs2DADBgzwvRdWAFWqVMmMGTPSunXrvPrqq2nXrl2uv/76zJkzJ5dccklefPHFUpfICkaIzkqnbt26uf/++9OvX79MnTo1l156aQYMGJBtttkmCxYsyF577ZWhQ4dm/vz5OeGEE3LyySfniCOOyMsvv+yEAkrgmycRCxYsyOjRo9OvX7906tQpzz77bB588MF07949e+65ZwmrhFXPggUL0qVLl9x9992FY7NmzcrFF1+cvfbaK1OnTk2SVKtWLVtuuWVuvfXW3HHHHenXr1+pSgb+v7lz5+aII47IzJkz88ILL+TJJ5/MwQcfnNdffz377rtvEvsCwfK2aDJXlSpVUrVq1cydOzd//vOfM27cuEyZMiWrr756brrppvzjH//Itddem7feeqvEFQPvvPNOJk2alKuvvjpdunTJUUcdlSeeeCITJkzI5ZdfnrfffrvUJbICEaKz0hg1alQmT56cddZZJ88++2z+8Ic/ZPDgwZkyZUruvffeXHLJJXnqqaey77775uyzz85TTz2VqlWr5rzzzkuHDh3Spk2bzJw50wkFLGdVq1bN6NGjM3z48MyePTvjx4/Pvvvum5tuuildunRJ7969M2DAgFSpUiUvvPBCPvvss1KXDKuEatWq5amnnsopp5yS5OvlXOrUqZPBgwendevWS5zc77HHHrnmmmty9tln228ESmDRRJCKiorMnj079erVyzXXXJOGDRvm8ssvT+/evXPWWWfltddey1FHHVXiamHVctddd+WII47I73//+yTJ3//+9/zoRz/Kqaeeml133TXnnntu/v73v6dFixa5+uqr88wzz+Tmm28u3A0GlMbkyZNTUVGRNdZYI8nXF6k33HDDDB48OH/+858LF74gEaKzkvjLX/6SDh065IEHHsisWbPyk5/8JL///e/Tu3fv3HjjjYutz/qHP/wh6667bs4999y8/PLLqVu3bgYOHJjBgwenbt26JewFrDq+ecfHW2+9ldatW+ehhx5KvXr1svbaa6dly5bp3bt37rrrrpx00klJvl6q6aqrrsrf//73UpUNq5wGDRqkoqIiu+66a84666wkSatWrfLb3/4248aNS69evRZrf/TRR+f444/P66+/XoJqYdV055135qGHHkpZWVlhObT69evnhBNOSKtWrXL99ddn0KBBhUklP//5z3PLLbfk/PPPL3Xp8IO3aLnQ7bbbLj/5yU9y55135t57782QIUPyi1/8IqNHj06fPn3y7rvv5swzz8z06dOzxx57pHfv3vnjH/+Ym266KV988UVpOwGrgO9aYilJ2rZtm9mzZ+eOO+5IklSvXj1JstFGG6V+/foZOHBgnn76aSsakESIzkpi7733zn777ZdBgwblsccey8KFC3PsscfmggsuyMyZM/Puu+9mwYIFhfYPPvhgZs6cmdNOOy3vvvtumjVrliOOOKKEPYBVy6I7Ph544IE8+uijueSSS3L55ZensrIyxx13XCorK3PQQQelS5cuWbhwYWbPnp3zzz8/U6ZMyYYbblji6uGH7dsnAVWrVs3ee++dK6+8MnfddVeSZOedd851112XgQMH5rrrriu8rkqVKrnmmmvSv3//5V43rIo+/vjj3H///TnrrLNyxBFH5IgjjsgGG2yQJNl0001TVlaW5557Lt26dUuHDh2SfL304Y477ph77703X375ZQmrhx+2iRMn5uc//3nef//9NG/ePD169Miaa66Zm266KSNGjMhhhx2W+vXrp2fPnunWrVs+/vjjnHnmmUmSE044IZ06dcpjjz1W4l7AD983N+O+9dZbc8MNN2TcuHGZPXt2GjZsmD59+uS8887LX/7yl8Km3J999lmOOuqoXHPNNTniiCOsaECSpKzS5RRWcIv+wausrEyHDh2yYMGCnHfeedltt92SJPvuu2/GjBmTe++9NzvssEPhda+++mp++ctfZtiwYVlvvfVKVT6ssv72t7/liCOOyLvvvpvLLrssv/rVr5J8HQj8/ve/zxVXXJGf/vSnadCgQV577bXMnz8/w4cPT3l5eSorK31RgaVo4cKFqVKlymInEfPmzVvsTq5TTjklgwcPzrBhw9KuXbvMnz8/l19+eS688MLcd9992WuvvUpVPqzSRowYkT333DPz5s3LX//61+y6665ZsGBBqlWrloULF2brrbfOVlttldtuuy3vvPNOjjvuuJxzzjnZddddC2EAsPQ98sgj6d27d9Zff/0MHTo0NWrUyF/+8pf0798/Y8aMydixYwsXvebNm5crr7wyf/rTn9KlS5f06dMnSTJ79uzUrl27hL2AH7ZF55VTp07N7rvvnvnz56dKlSqZOXNmjj322PTo0SPVqlVL7969c+211+aAAw7IWmutlT/84Q857bTTcu655yZZPIhn1eVbFSu0ysrKVK1aNQsWLEhZWVluv/32fP7557nuuuvyyiuvJPl6pmu9evXym9/8Ju+++27hddtss03Gjh0rQIflZNHtrItsscUWOf7447PGGmsstrP5Ouusk9NOOy1Dhw5N9erVU7NmzfzsZz/LmDFjUl5enoqKCgE6LEXjxo3LpZdemo8++qjw5f/qq69Ojx49cvrpp+fDDz9MklxxxRVp3759DjnkkPzjH/9I9erV07Nnz+yzzz7p3bv3Ynd8AcveojE3c+bMbLPNNmnZsmVuuOGGVFZWplq1aoUg4PTTT88dd9yRbbfdNtttt1022GCD7L777gJ0WMY6d+6c0047LR999FFhssjee++d4447Ls2aNct5552XWbNmJUlq1KiRY445JjvttFNuvPHGDB8+PEkE6LCMlZWV5ZNPPsmee+6Zli1b5tVXX824ceOyySabZNCgQbn++utTo0aNXH311YU//+Mf/0i/fv0KAXoSATpJzERnBfbtK32LZsy98MIL6datW7p06ZJevXqlefPm+ec//5ktttgiO+20U373u99lnXXWKWHlsGpZ9GukrKws06dPT5UqVTJ//vw0aNAgM2bMyLXXXpvrr78+p59+en79618n+b9Zsd+2aGYdsPT87ne/yznnnJO+ffvm6KOPzkUXXZTf//73OfDAA3PXXXelTZs2Of3009OhQ4d8+eWX2XHHHVNeXp4///nPqV+/fr744ovUqlUrNWvWLHVX4Afvu+7EWhSm33HHHbnqqquy66675qqrrio8X1FRkRdeeCGjRo3Kuuuum1/84hfLtWZYFS0aq3PmzMmgQYMyePDgHHTQQYUZ5pdeemn+/Oc/Z/fdd8/FF19ceN348ePz7rvvpkuXLqUqHVY5r732Wm644Yacf/75WXPNNdOjR4/86U9/ynbbbZe33347vXv3zpFHHlloP3fu3ML33mLnrayaJBWskBYuXJiqVavmww8/zPnnn585c+akTp06OfPMM7Pjjjvm0ksvzSmnnJLGjRvnmGOOydprr50HHngg7dq1y7HHHitEh+Vo0cn+Qw89lLPPPjuVlZWpqKjIWWedlUMOOSRHH310pkyZkmuvvTYbbLBBunTpUgjevxnAL5pZByxdv/nNbzJx4sRce+21KS8vzyeffJJnn302LVu2zLnnnlvYc6S8vDzbb799/vSnP2XbbbfNoYcemgceeCBrrLFGqbsAq4Rvnqg/99xz+dvf/pYmTZqkZcuW2XzzzbP33ntn8uTJGTJkSDbccMP07NkzSfLkk09m++23z84771zK8mGVsGicLvr+W6tWrRx88MGZOnVq7rjjjqy//vo57LDD8utf/zr//Oc/88QTT2SdddbJCSeckCRp0aJFWrRoUcouwA/ONy9Af9eyK82aNUvPnj2z5ppr5le/+lVGjhyZF154IT/60Y+y3nrr5cYbb0y1atVy6KGHJklhucNF+wHBItIKVkhVqlTJiy++mD333DP77LNPNtlkk7z11lvZbLPN8uqrr+bggw/O+++/n0GDBqVJkybp2rVr2rRpk3/84x+FdeeAZWP+/PmFXcsXuffee3P44YfnoosuylprrZWxY8fmmGOOyZQpU3LSSSfluOOOy9SpU3Peeedl7bXXzrbbbpski822s4QLLF2LLmhVq1YtV1xxRcaPH5+zzz47DRs2zLrrrpskWXfddXPFFVfkhBNOyI033pg11lgjzZs3z7333ptx48Y5cYDlaNF4u+CCCzJw4MBsvvnmmT17dpLk5ptvTqtWrXLwwQdn2rRp6d+/f2bOnJlXX301L7/8cmGZQ2DZ+WY4N2bMmFSvXj3169dP06ZNc/zxx+fTTz/NZZddlvXWWy+77rprfvOb32T69Om5+uqrs95669lbBJaRTz/9NE2aNMlXX32V1VZbLUnyxhtvpF69emnWrFnq16+f+vXr5+OPP86LL76Y8847Lz/60Y/yxRdfpEmTJvn444/zwQcfFML4Reelzk/5NmdGrJAWLlyY6667LkcffXRuvfXWnH/++alWrVrq16+fioqKJMlZZ52VTp065dxzz80zzzyTJFl//fVLWDX88D311FPp06dPYQ3lRR599NF07do1J598crp3757+/fvn9NNPz29/+9uMGDEim266aY488sjUqFEjN910U4mqh1XHwoULU1ZWlmrVquXTTz9Nktxzzz3ZeOON89lnn2XMmDGFtjvvvHN69+6dF154Idddd10+/fTTdOjQISeddFKJqodV16WXXprbb789Q4cOzfDhw3PBBRdk3Lhx6dq1az777LOsv/76OfLII3PUUUflnnvuybx58zJu3LisueaapS4dftAW7dWVJL/+9a+z33775cADD0zbtm1z1VVXpV69eunZs2c233zznHHGGfn73/+eddddN0cffXT22Wef7LjjjiXuAfwwPfjgg9lggw0yfvz4rLbaapk6dWratm2bn/70p2nbtm3222+/vPPOO0mSqVOnZvr06YW9Cl577bW0bNkyd999d/r06SM0598SolMyxZbjr6yszLRp0/LMM8/koIMOyoIFC7Lddtvl73//e1588cVsueWW+fjjj5MkN9xwQ37+859np512SuJKISxrb775Zq6//vr88Y9/zPTp05Mkc+bMydixY9O4ceMkX+9fkHw9k27TTTfNFVdckSRp3759Bg4cmOuuu640xcMq4ptLQlxzzTU56KCDMmrUqKy++uoZPHhwateunVtuuSVvv/124TWHHHJI9t5774wdO9aySrAcLZocknz9+3PKlCnp06dPdt111zz77LM57LDD0qVLl9SsWTP7779/kmSTTTbJeeedl6effjp/+ctfUq9evVKVD6uMReeZvXr1ypNPPpmhQ4fmzTffzG677ZYLL7wwI0eOTMuWLXPMMcekfv36OeGEEzJr1qzssMMOufTSSy2NBsvIeuutl5122ildu3bNjBkzcv7556dZs2a566678vvf/z7jxo3L8ccfn3HjxmXTTTfNRhttlEsuuSS77rpr9thjj7Ro0SJt27ZNsvjvZPguQnRKYtEMuQULFmTy5MkZPXp04epgWVlZGjZsmG233TZ/+tOfsvHGG2fDDTfMsGHDsuGGG+bzzz/P+eefn+eeey5Jcv3116dhw4al7A6sMn7961+nR48eufbaa/PAAw/kq6++Sq1atdKuXbsMHTo0s2bNSo0aNTJ37twkSdu2bTN9+vTC40XLuPiCAsvOogD9uOOOyyWXXJKDDz64sO/AxhtvnGuvvTZPPvlkbr755nzyySeF1/Xr1y9//etf/U6F5WTRzNbx48fnpptuSo0aNXLKKadkr732yogRI3LooYfmtNNOyx//+Md07do1zz//fH75y18WXm+swvK1cOHCvP7667nkkksKe4jcf//96dmzZzp27Jgk6dSpUw477LBMnDgxw4YNK3HF8MO39dZb54ILLkiVKlWy55575tNPP02fPn2y0047pUuXLnn22Wfzj3/8I1deeWVq1KiRQYMG5eijj87WW2+dP/7xjznjjDMK7/XttdTh24ToLHeLNmcYP358DjzwwBxwwAFp3bp12rRpk1/+8pd5/fXXkyRNmjTJpZdemnbt2uXee+9N/fr1k3y9nMTYsWOFcLAcVVZWZuHChUmSvn37ZptttsmAAQPy+OOPJ0kOP/zwrLnmmjn66KOTpLCb+YQJE7LRRhsVHi/iCwosW0899VSef/75PPDAAzn++OOzww47FIL0RUuh3Xvvvbn99tszbdq0wutq1apVwqrhh+3LL7/M0UcfnXHjxiX5euJIRUVFzj333EycODFJ0rRp0zRo0CCPPvpo2rVrV9g8tEGDBvnxj3+c4cOH54033ih6Ryfw/X1zXE2YMCFjx47NfffdlwkTJmTmzJmZOnVq3n777fz0pz9N//79c+SRR+aqq67KBRdckMrKyjz++OOZOXNmDjjggDz44IM54IADStgb+OFbNGZbt26dCy64IDNmzMgjjzxSWOLsq6++StOmTTNo0KDcfvvtefPNN7PRRhvl5JNPzlVXXZU999wzlZWVfqfyHxOis9ws+oeprKws9913X1q3bp111103J598cp599tmcffbZeeihh3LCCSfk3XffzcUXX5wtt9wyn332WW644YY8//zz6devXw477LAcccQRad++fWk7BKuIRRusVKlSpbCU0m233ZZatWplwIABGT16dH784x/npJNOysiRI9O2bduceuqp+cUvfpFhw4bluOOOK3EPYNUzevTozJ8/P9ttt13h2KK7wJKvZ6nvvffe6d+//xJ7HADLRmVlZW6++eacf/75hbtAqlatmvfeey+bbLLJYm0nTJiQt956K6uttlrmzZuXESNGpHv37nn99dezxRZbWMIQlrJv/o783e9+l0MPPTQ/+9nPcthhh2WrrbbKmWeemcrKymy//fZp1qxZrr766jz00EM54ogjkny9ieHAgQMzduzY1KhRIy1atChld+AHbdGEykVjtmrVqmnfvn1+85vfZP78+Rk8eHCS/5vYtdFGG6VRo0aFfYK+6ZsbicK/Y9FLlptF/zD99re/zXnnnZdBgwbl8MMPLzz/k5/8JK1bt0779u1z7rnn5u67786NN96Y6667LmeeeWY23HDDVFRU5N57782ee+5Zol7AqmXBggWF9ZGHDBmSv/71rzn33HOz5ZZb5rbbbsuee+6ZK664In379s0vfvGLtGzZMhdeeGHef//9VKtWLePGjUuzZs0WW6MZWHq+PbYWPS4vL0/dunUzadKkrLvuukm+XualsrIyL774Ytq1a5err746Bx10ULbccstSlQ+rhPHjx6dOnTpZZ511MmbMmEIId8EFF6ROnTr56quvCuNw0Rjeb7/98vzzz6dVq1ZZuHBhqlWrloEDB1r/HJaBb/4uPfjggwuTtzbccMM0b948F110Ue6///6MHz8++++/fz744IO0adMmP/nJTzJ//vzMmjUrp59+ehYsWJAtttiixL2BH7aKiopUrVo1CxYsyKhRo7Lmmmtm7bXXTr169bL33nvn448/LuzNdeCBByZJ3nvvvVRUVBRWN4Dvq6zSfQssR88991x22WWX9OnTJ+eff36S/5vluujLy+DBg3P88cfn8ccfz2677ZYFCxbk008/TY0aNVKjRo2Ul5eXthOwilj0BSVJ7r333tx222156aWXcsghh+TUU0/N2muvnaeeeiqHHXZY9t9//5xyyilp1qxZYUx/1/sAS883x9Y//vGPlJeXZ/XVV89qq62WJ554Ivvtt18uu+yyHHLIIYXg7fPPP0+3bt3Ss2dPF6RhGausrMyrr76aTp065eyzz86RRx6ZNdZYo7DG+aWXXppOnTrliCOOyJNPPrnYyX1FRUWeffbZPPHEE6lZs2b69OlTwp7AD9+8efOy0047Zf78+XnwwQcLF6AX6du3b2655ZZstdVW2X777XPJJZdku+22y1prrZU33ngj9evXzzPPPOM7LyxDi84zx48fn4MOOihfffVVkq+XAn700UdTs2bNTJw4MRdddFFuueWW7LTTTmnbtm2uvvrqnHTSSbnoootK3ANWdkJ0lrtDDjkkL7zwQm677bb85Cc/WSJsmzFjRrbddtvstddeueaaa0pYKfD5559nhx12yMYbb5zNNtss48aNyyuvvJKTTz45J510UurUqZObbropF110UY4++ugcf/zxhTXokiVnyQJLxzcvVp144ol59NFHs3DhwtStWze/+93vsvPOO+fcc8/NDTfckJ49e6Z9+/apXr16zjzzzMyePTuPPPKI2TiwnBx33HEZMWJEevfunf333z81atTIxRdfnEsvvTTHH398brnllhxwwAHZdNNNs/nmm6dWrVpZbbXVsu6662bttdcudfmwSrjwwgvTt2/f3HbbbTnwwAMLv2cX3ZU5a9asHHXUUXnnnXdy/fXXZ+7cubntttuy5pprZp111smJJ55Y6i7AKuGll17Kz372sxxwwAE566yz8vHHH2e33XZLu3btCpv5vvnmm+nbt2/uvPPODB06NOuss07atm2bxPkp/xshOsvNN2fMtW7dOvPmzcsdd9yRzTffPMnigcDGG2+cfffdN1dccUXJ6gW+PqG4//778/LLLxfG7/HHH5+XXnopxx13XGG981NOOSX33HNPnnrqqSXWdQX+d9/1hb+ysjJHH310nnvuuVxzzTWZM2dObr311rz00ksZNGhQunTpkjPOOCPPPfdcXnnllTRv3jwbbLBBHnrooRL1AlYt3/zuu88++2TKlCk577zz0rlz5yTJkUcemSFDhqRDhw6pW7duPvnkkyxYsCBTpkzJP//5zzzyyCPZeeedS9kFWGVMnz49xx13XKZNm5bzzz8/bdu2XeKO6ZEjR6Zdu3Z59NFH07Fjx1KXDKuEb9/VfO6552bhwoW55JJLkiQ///nP88orr+SLL77IXnvtlTvvvDNJ8vTTT+fKK6/MVVddlY033jiJAJ3/nRCd5WrRlfzZs2enefPm2XbbbXPdddcVbperqKjI66+/nsMPPzyXXXaZLydQIotOGs4444yMGjUqw4YNS/Xq1VO1atXMnj07HTt2zOeff56LL744+++/f5LkrbfeymabbVbiyuGHZ9F4/PDDDwtrOu6+++754osvsttuu+XUU09Nt27dCu333nvvTJw4Mc8//3zq1q2b6dOn57333ku1atWsfw7LyaJxO3/+/FSvXj0zZszI7rvvnkaNGuWcc84pzIhr3759pk2blnvuuSfNmzdP1apVM3PmzMyZMyeNGjUqcS9g1TJhwoQce+yxqV27dq688spsuOGGi4Vu77zzTn784x/n9ttvz3777VfYjNSmhLBsfHOi5bnnnpvu3btn9uzZWbhwYTbZZJPsu+++qaioyJAhQ/LUU0/l6KOPzmWXXZZTTz01FRUVqaysTLVq1ZZYbhS+L5dgWGa+6/pMtWrVsmDBgtSuXTuPPfZYHn300Vx22WX55z//meTrXZVvueWWNGjQoDBDHVj2FixYsNjjRV8yVltttUyYMCHz5s0rbOBSu3bt9OjRIx9++GHuuOOOPP/880mSzTbb7DvHPfC/KSsry3333Zc999wzV199dfr165dZs2Zl0qRJee+997LRRhslSebMmZMkueeeezJx4sTcdtttSZLy8vJss802AnRYThYsWFD4PVq9evUkSb169XLzzTdn/PjxueGGG/LGG28kSR599NF88cUXOemkkzJhwoQkSd26dQXoUALrr79+LrjggkydOjUXX3xxZs6cmSpVqhS+Jz/77LPZeuutC3eIVKlSRTAHy8iii1RJcuqpp+aPf/xj5s6dm6233jrbbLNNHn300cydOzeDBw/OBhtskPLy8tSqVSunn356nn322VStWjXVqlVLEuOUpUaIzjLxzSt9i0K1Rf+tVq1aKioqssUWW2To0KEZOHBg7rrrrsyYMSNdu3bNfffdl+uuuy7rrLNOyeqHVcnChQsLXzCuvfba3HHHHRkxYkSSpHfv3pk/f35+9atfJUmh3dSpU7PPPvvkvffey6OPPpokrvDDMnLllVeme/fuOemkkzJo0KA89thjqVOnTjbbbLNsuummhaXPatWqVZj12rx583zxxRelLRxWEd+8gDx//vzC78qrrroqF154Yf785z/n448/TqtWrXLFFVfk8ccfz+23356JEyemZs2ahYklTz31VKm6APx/bdq0ya9//eu8+eabheUiqlWrlrfffjuDBw9O+/bt06BBgxJXCT98VapUydSpU3P99dfn448/zu23355WrVoVnn/hhRfyxRdfpHnz5kmSyZMn56yzzsqIESMshcYyYzkXlqnf/e53ady4cQ4++OAlnlsUuF1++eU588wz07BhwzRt2jTPPfdc6tatW4JqYdWz6BbVWbNmpXXr1lmwYEFmzZqVxo0b5/jjj8+xxx6bxx57LPvuu2/233//7LLLLlljjTVy8skn57777suwYcMycODATJw4MauttlqpuwM/OC+99FKOPvronH322TnooIMKxysqKlKlSpXcddddufDCC3PwwQfn/PPPT5JMmzYt7dq1y9lnn51f/vKXJaocVi1TpkxJ7dq1U6dOnUyePDk777xz6tevn3nz5mX+/PlJkuHDh6dhw4YZMGBArrjiipx22mnp1q1b1lxzzYwfPz4tWrQocS+ARfr375977703xxxzTLbbbrv89Kc/TefOnTNkyJBSlwarjHPOOSfXXXdd6tatm7/97W9p0KBBYY30p556KnvuuWe6du2aOnXq5Pbbb88dd9yRvffeO8mSa6nD0mAmOkvVN6/JzJo1K7feemuGDx+e5Ouw7rucdtppOfzww7PTTjtlzJgxAnRYjqpUqZJPPvkkw4cPT7t27fL222/noYceyu67756LLroojzzySDp16pTHHnssEydOTP/+/XPqqafmmGOOyQ477JDatWunRYsWhVl3wNL18ssv58svv8wuu+yy2O/YqlWrpqysLB07dsxRRx2V/v37p1OnTunRo0fatWuXtddee7F10oFl5/nnn0+bNm0yadKkVFRU5Iwzzsjmm2+eZ599Ni+99FJuuummlJeXZ/fdd0+S9OrVKwcddFAuvvjiPPTQQ1m4cGFhJh2wYujVq1d23HHHXHzxxdlmm21yzDHHCNBhGaqoqFji2HnnnZeuXbtm+vTpueeee5KkEIzvsMMOuf766zNhwoS88847eeCBBwoB+jfbwdJkJjpL3YwZM5J8vfbj448/ns6dO+ell17KNttss8RuyK4OQmm9//776dq1a6ZMmZKTTz45v/nNb5Ik48ePz29/+9s899xzuf/++9OqVav885//TPXq1TNnzpw0adIkn3/+eTp06JA2bdrk2muvtZQLLAMnnHBCXnjhhbz22mtJFl826Zt3krz11lu58sorU61atWy00Ua54IILSlk2rFKGDBmSIUOG5JlnnsmMGTPStm3bHH744TnttNOSfD1WX3755Rx00EE56qijcs455yRJDjvssJx00knZeuutS1g9UMysWbNyzDHH5JBDDkmXLl1KXQ78YC1YsKAwKevJJ59M3bp1U7169fz4xz/Op59+miOPPDIVFRU57bTTChekF5kzZ06qVKmSmjVrLpE3wdLmbxdL1auvvpotttgil156aT799NN07NgxBxxwQPr27Vv4x+2bBOiwfH37uunqq6+e3XffPbNmzcqXX35ZON6iRYv06NEjm222WY466qhMmzYta665ZsrLy1NWVpbrrrsuW221VZo1a5brrrtOgA7LSJ06dfL5559n3LhxSRbfGGnR79Tjjjsun376ae66667cdtttAnRYhr7rzspx48alfv36Sb6eRLLRRhvlH//4R+H5KlWqZJtttsnWW2+dTz75pDDb7tZbbxWgwwps0RIRAnRYthYF6HvttVd69OiRo446Kh06dMiAAQPSuHHj9O3bN7NmzcqNN96YsWPHJvm/89patWqlZs2aqaysFKCzzPkbxv9k0UnAon/Apk2bli+//DIPPPBAunTpkk8++SSdOnXKl19+mVGjRpWyVFjlVVRULBF2N2rUKMccc0z233//3HDDDYttarb99tvnxBNPzNSpU3PVVVcVjpeVlaVq1arp1atXHnjggeVWP6yK9t9//3zyySe55557Cnd6fdPkyZMzb968rL766iWoDlY9VapUyfz58/PQQw8Vjr3xxhtZZ511Co8322yzjB07Ng8//HDhWLVq1VKrVi13YcJKxniFZW/+/Pn5+c9/ni+++CLPPvtsxo0bl86dO+ecc87J2LFjs9VWW+WMM87I+++/n2uuuSYffPDBEue1JnWxPAjR+Z8s+lLx8ccfJ0m22GKLtG/fPocddli23377dOvWLXPmzMmbb75ZCOeKrY0OLDuLTtpnz56dSy+9NBdffHHuvffeVFRU5Ec/+lGOPvrotGnTJqeffnrefffdwut222233HPPPbnwwgsLxxo1apSjjjoqp5xySim6AquUNm3a5NRTT03//v1z22235dNPP03y9W2vU6dOzYknnpjPP/88W265ZYkrhVVH3759c+qpp+b+++9P8vVShttss03h+TPPPDNVqlTJVVddlVtuuSWTJk3KX/7ylzzxxBNp27ZtqcoGgJLbb7/9ctNNNy12bPbs2fn8888zaNCgNG7cOBdeeGEefvjhXHXVVdlqq62SJHvvvXcOPPDAjBw5MlOnTi1F6WBNdP53/fv3z29/+9v89a9/TevWrfPHP/4xv/rVr/Lhhx/mpptuyrvvvpvbbrstU6dOzauvvuq2VSiRt956Kz/96U/TvHnzfPnll6levXo23HDD/OEPf0iSDBs2rLCm8tChQ1OnTp3FXm/2HJTGjBkzcuKJJ+b2229P69at07Fjx8yYMSNPPfVUatWqlWeeeSarrbZaqcuEVcb06dNz7LHH5p///GdOPfXU9O3bNxdddFHat29faPPhhx+md+/eeeqpp1JeXp5PPvkkZ511Vs4444zSFQ4AJXb88cfnrrvuysMPP5wdd9wxydfnqbvssktGjhyZ/v3754EHHshtt92W3XbbLTNnzsx9992Xww8/PEnywQcfZIMNNihdB1ilCdH5ryz66/LNW2XefPPNXHHFFfnzn/+cPn365IgjjsiZZ56Z2rVrp3///nn99ddzySWX5J577snQoUNzwAEHlKp8+MH75qaD3zR+/Ph069Yt7du3zxVXXJEk2WefffLQQw+lZ8+eGTBgQJLknnvuSZ8+fdKuXbvccssty7N04N+47LLL8sILL2TcuHHZbrvtsuWWWxY2KASWrwkTJqRHjx6ZOXNmnn/++bRp0yYNGjTIWmutlXXWWSebb7555s6dm08++SQ//vGPs/HGG2eTTTYpddkAUDKLJmUdcMABGT16dJ544ok0b94806ZNy6GHHpqXX345DRs2zLBhw7LuuusmSV5++eX06tUrV155ZXbYYYcS94BVnRCd/9g3dzp+++23M2XKlNSpU6dw++pFF12Up59+OtWrV8/uu++e999/PyeeeGI233zzJMmoUaPSunXrktUPP3TfHKOjRo1KtWrVsvnmm6dWrVoZOXJkBg8enBtvvDHJ17fRvfHGG9l///1zzTXX5Iorrsjxxx+fOXPm5N577027du2y8cYbl7I7QBFz585NjRo1rP0IJTZy5Mj07NkzH330UTp37pzq1atnwoQJmTJlSqZOnZp58+alvLw8Tz31VNZee+1SlwsAJbNgwYLCBqLvvvtuOnTokB//+Me56aab0rBhw1xyySUZPHhwunfvnosuuigVFRV57733ctBBB2WrrbbKzTffbONQSk6Izn/td7/7XQYMGJDatWsnSZo1a5aHH344VapUyeOPP54hQ4bkrrvuSnl5eS6//PIcffTRJa4Yfvi+udTKAQcckLFjx2bGjBlp0KBBRo8enTp16uTtt9/Opptuml/84heZPHly7r333lRWVmbHHXfMhAkTcvfdd2e//fYrvOc3Q3lgxVLsrhNg+Ro6dGiuvfbatG/fPhdccEHh+Lx581KlSpVUVlamevXqJawQAFYMn3/+eTp27JhNNtkkL730Ut5///1069Ytt99+e7766qucdNJJeeqpp1KlSpVsttlmGTVqVDp06JBbb701ifNTSs/fPr7TNzf//OZ1lptuuikXX3xxBg4cmLFjx+a6667LY489luuuuy5J0rFjx9x2220566yzMn369AwdOjSu08CytXDhwlStWjWTJ0/Oj370o0yZMiVDhw7Nn/70p8ybN6+w/uqmm26af/zjH3nzzTdz3nnnZc0110yNGjXSvHnztG7dOk8//XSS/xvzvqDAikuADiuGrl27pkuXLhk2bFhhabTk69+h1apVE6ADQJI5c+bkgAMOSOPGjXP99dfn4YcfzpAhQ3Lvvfemd+/eWW211XLppZfm9ttvT+fOnbPTTjtlwIABhQC9oqLC+SklV63UBbBiqlKlSr766qusttpqKSsrK8x4Gzt2bE477bTstddeeemll3LYYYflF7/4RY444ojFXnvJJZdk1113TYcOHUrYC1g1VKlSJW+//Xbatm2bzp0758477yw8t8suu2TTTTfNe++9lx/96EdJvt7s7N1330379u3z0EMPpaKiIoMHD06LFi2SCOcA4L9x0kknZdKkSRkyZEjWWmutHHLIIYVb1gFgVfTtWeOzZs3K5MmTc84552SNNdbIGmuskRYtWmT27Nn51a9+lU033TSHHnpott9++2y//fZLvNeiu66hlFzG4TvNnDkzW221VXr37r3Y8XHjxqVGjRp5+OGH06FDhxxyyCG54447svrqq+dPf/pT3nvvvUJbATosP3/7299St27dwh4Ei47deeedGTRoUFq0aJEOHTrk+eefz7HHHpuePXtmxx13zOGHH57u3bsXAvRv3oUCAPx71apVywUXXJAtttjCfiIAkP+7q3nYsGFJkjXXXDPTpk3LRx99lOT/zjt/8YtfZMstt8xZZ52VRx999F++F5Sav4l8p2rVquXQQw/N5Zdfnvvvvz9lZWWZP39+tttuu9x00005+OCDc+211+aSSy5J8vVVxQcffDB//etfLd8CJXDwwQenR48eeeihh3LXXXflwQcfTPv27fPrX/86d955Z5588smMGzcuDz/8cLp3755bb701nTt3zksvvZRDDjkkydfLuPiCAgD/vbp16+bWW29N69atS10KAKwQxo0blz333DOPPfZYysrK8stf/jJDhw7NyJEjC+edNWvWzDrrrJMkueWWW0pZLvxb7jPkOzdnqFWrVk444YR89tlnOeigg/Lyyy9nyy23TOfOnXPHHXekU6dOhZnms2fPzmmnnZaRI0fm9NNPtxQElEBZWVlOOeWUTJw4MX369MkHH3yQO+64I127di3shN6zZ8/07ds3l19+ebp27Vp47aJ/A4xdAPj+LOECAP+nfv362WWXXQqzz/faa6+MHz8+Z5xxRgYNGpT11lsvr776ar788suMGDEi66+/fokrhn/NlEMKAfpDDz2UsWPHFo43aNAgJ598cjp37pyOHTtmxowZ2W233XL22WfnnXfeyc4775x99tknu+++ex577LE88sgjiy0lASxf1atXz6WXXppWrVpl6623LtxSvujukLKysrRp0ya1a9de7HVmnwMAALA0rbvuutlkk03yu9/9LknSvn37HHvssalTp04233zz7LjjjunQoUN22WWXQoBeUVFRypLhXyqrtPbGKq+ysjJHHHFE/vCHP2S11VZLz549s9lmm+Wwww5LknzwwQf5+c9/noqKikLI/uKLL2bEiBGZOXNm6tatm169etnoAVYQEyZMyLHHHpvatWvniiuuyEYbbZS//vWvOeKII3LGGWfklFNOKXWJAAAArOTuueeejB49Ov3798+wYcPyzjvvpGPHjtlss82SfL2ky4EHHpgBAwZkjz32KLzu/vvvz5w5c9KkSZPstttuSb7OptwdzYpMiE6S5MILL8x9992XJNlss83y1FNPFa4MnnTSSXnrrbdy7LHHpmXLlrn33ntLXC3w7yxaXqlVq1Zp1qxZzjnnnFx55ZXp2bNnEl9QAAAA+N8MHjw4xx13XG6//fbMmDEjAwYMSJL06dMnnTt3zmqrrZZ27drlmGOOSY8ePQpLjX6b81NWBkJ0kny9rvk555yT8ePHZ4899sj++++fG2+8MTfddFMaNGiQhg0bZtttt83ll1+evn375swzzyx1ycC/8cc//jE9e/bMtGnT8sADD6RTp05JvnsfBAAAAPhvzJ07N/369csll1ySUaNGZf31188111yTG264IT/+8Y9z5pln5umnn86dd96ZsWPHpmbNmqUuGb43IToFH374Yc4777y89dZb6du3b3bdddfMnDkzjz32WIYMGZJ3330377zzTpJkypQpadiwoSuFsAKrrKzM7bffng4dOmTttdfOwoULU1ZWZtwCAADwH1s0EWvRjPFFM8oXHT/iiCPyxBNP5IUXXsh6662Xp59+Ok888UT69++fNm3a5I033sif/vSn7LzzzqXuCnxvQnQWM2bMmFxwwQWZNWtWLrzwwrRt27bw3FtvvZWnn346HTp0yCabbFLCKoH/VkVFhX0LAAAA+F7efffdDB48OOeff35q166duXPnpmbNmpk2bVp23333jBkzJptuumnGjBmTGjVqJEmeeuqp3HXXXfnDH/6Qc845J+eee66lW1hpuZ+fxWy99dY54YQTUlZWlv79+2fixImF5zbbbLP06NFDgA4rIQE6AAAA39eoUaPyl7/8JZdeemmSpGbNmnnppZfSsmXLtGjRIqNGjcrChQvzs5/9rPCa3XbbLddcc0369euXu+66K1OmTBGgs9ISorOETp06pXv37vn8889z3nnnZdasWaUuCQAAAIASOeSQQ3LYYYfl0Ucfzd13350HH3wwHTt2zKGHHpq77ror22+/fQYPHpxRo0alV69ehdetttpq2WKLLVK1atVUVFSUrgPwPxKi8526d++eTp065dVXX81rr71W6nIAAAAAKJGysrKccsop2WabbXLuuedm//33z+DBg9OvX78sWil6xx13zLXXXpurr7469957b+G1CxYsyIQJEzJt2rRSlQ//M2uiU9TcuXPzwQcfpEWLFqUuBQAAAIASmzlzZg477LB8+OGHGTRoULbZZpvCBqNJMm/evAwbNiz77LNPkuSzzz7L8ccfnx122CFnnHFGKUuH/4kQHQAAAAD4j0yYMCHHHntsateunSuvvDIbbrhhKioqltiLa1G4PmXKlDRq1KhE1cLSYTkXAAAAAOA/sv766+eCCy7I1KlT069fv8yYMWOJAD1JYRNRATo/BEJ0AAAAAOA/1qZNm/Ts2TPPPPNMBgwY8J1tFoXo8ENQrdQFAAAAAAArl/333z9ffvll9txzz1KXAsucNdEBAAAAgO/tm5uLwg+REB0AAAAAAIpwiQgAAAAAAIoQogMAAAAAQBFCdAAAAAAAKEKIDgAAAAAARQjRAQAAAACgCCE6AAAAAAAUIUQHAIBV0AYbbJABAwYs88/54IMPUlZWljFjxizzzwIAgGVBiA4AACVy+OGHp6ysLGVlZalevXoaN26cjh075uabb87ChQuXymcMGTIka6yxxhLHR48enWOPPXapfMYihx9+eH72s58tdqxZs2aZNGlSWrZsuVQ/CwAAlhchOgAAlNAee+yRSZMm5YMPPsgjjzySXXfdNb/5zW/SpUuXLFiwYJl97lprrZXatWsvs/dfpGrVqmnSpEmqVau2zD8LAACWBSE6AACUUM2aNdOkSZOss8462WabbdK7d+888MADeeSRRzJkyJAkyfTp03PsscemUaNGqVevXnbbbbeMHTu28B5jx47Nrrvumrp166ZevXrZdttt8/LLL+eZZ57JEUcckenTpxdmvJ9//vlJllzOpaysLDfeeGP222+/1K5dO82bN8+DDz5YeL6ioiJHHXVUNtxww9SqVSstWrTI7373u8Lz559/fm699dY88MADhc965plnvnM5l+HDh2eHHXZIzZo1s/baa+fMM89c7IJB+/bt07Nnz5x++ulp0KBBmjRpUqgbAACWNyE6AACsYHbbbbdstdVW+dOf/pTKysrstddemTx5ch5++OG88sor2WabbbL77rvn888/T5IccsghWXfddTN69Oi88sorOfPMM1O9evW0a9cuAwYMSL169TJp0qRMmjQpp556atHPveCCC9K1a9e89tpr2XPPPXPIIYcUPmPhwoVZd911M3To0Lz55pvp06dPevfunaFDhyZJTj311HTt2rUws37SpElp167dEp/x8ccfZ88998z222+fsWPH5vrrr89NN92Uiy++eLF2t956a1ZfffWMGjUql112WS688MI8/vjjS+t/MQAA/MfcUwkAACugTTfdNK+99lqefvrpjBs3LlOmTEnNmjWTJP3798+f//zn/PGPf8yxxx6biRMn5rTTTsumm26aJGnevHnhfcrLy1NWVpYmTZr82888/PDD84tf/CJJ0rdv31xzzTV56aWXsscee6R69eq54IILCm033HDDjBgxIkOHDk3Xrl1Tp06d1KpVK3Pnzv2Xn3XdddelWbNmGThwYMrKyrLpppvmk08+yRlnnJE+ffqkSpWv5/lsueWWOe+88wr9GThwYJ588sl07Njxv/w/CQAA/xsz0QEAYAVUWVmZsrKyvPLKK5k1a1YaNmyYOnXqFH7ef//9vPfee0mSk08+OUcffXQ6dOiQ3/72t4Xj/60tt9yy8OfVV189devWzZQpUwrHfv/732e77bbLWmutlTp16mTw4MGZOHHif/UZb731Vtq2bZuysrLCsR133DGzZs3KRx999J21JMnaa6+9WC0AALC8mIkOAAAroLfeeisbbrhhFi5cmLXXXjvPPPPMEm3WWGONJF+vR96tW7f89a9/zSOPPJLzzjsvd999d/bbb7//6jOrV6++2OOysrIsXLgwSTJ06NCcdNJJueKKK9K2bdvUrVs3l19+eUaNGvVffcaiiwPfPrbo8/6TWgAAYHkSogMAwArmqaeeyrhx43LSSSdl3XXXzeTJk1OtWrVssMEGRV+zySabZJNNNslJJ52UX/ziF7nllluy3377pUaNGqmoqPifa3ruuefSrl279OjRo3Ds2zPe/5PP2nzzzXPfffctFqaPGDEidevWzTrrrPM/1wkAAEub5VwAAKCE5s6dm8mTJ+fjjz/Oq6++mr59+2bfffdNly5dcuihh6ZDhw5p27Ztfvazn+XRRx/NBx98kBEjRuScc87Jyy+/nDlz5uTXv/51nnnmmUyYMCEvvPBCRo8enc022yxJssEGG2TWrFl58skn889//jOzZ8/+XnVuvPHGefnll/Poo4/mnXfeybnnnpvRo0cv1maDDTbIa6+9lvHjx+ef//xn5s+fv8T79OjRIx9++GFOPPHEvP3223nggQdy3nnn5eSTTy6shw4AACsS31IBAKCEhg0blrXXXjsbbLBB9thjjzz99NO5+uqr88ADD6Rq1aopKyvLww8/nJ133jlHHnlkNtlkkxx88MH54IMP0rhx41StWjVTp07NoYcemk022SRdu3ZN586dC5uAtmvXLscff3wOOuigrLXWWrnsssu+V53HH398fv7zn+eggw5K69atM3Xq1MVmpSfJMccckxYtWhTWTX/hhReWeJ911lknDz/8cF566aVstdVWOf7443PUUUflnHPO+V51AQDAslZWuWgBQgAAAAAAYDFmogMAAAAAQBFCdAAAAAAAKEKIDgAAAAAARQjRAQAAAACgCCE6AAAAAAAUIUQHAAAAAIAihOgAAAAAAFCEEB0AAAAAAIoQogMAAAAAQBFCdAAAAAAAKEKIDgAAAAAARQjRAQAAAACgiP8HpdPUAxKQNWEAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for i in ['Airline', 'Source', 'Destination', 'Total_Stops']:\n",
    "    plt.figure(figsize = (15, 6))\n",
    "    sns.countplot(data = data, x = i)\n",
    "    ax = sns.countplot(x = i, data = data.sort_values('Price', ascending = True))\n",
    "    ticks = ax.get_xticks()  \n",
    "    ax.set_xticks(ticks)     \n",
    "    ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha='right')\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "    print('\\n\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4eea5b4d-1492-441e-ad7e-26fbfb3c2528",
   "metadata": {},
   "source": [
    "# AIRLINE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "74489d6b-39dc-43df-98cd-c74f9a61e100",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Airline\n",
       "Jet Airways                          3849\n",
       "IndiGo                               2053\n",
       "Air India                            1751\n",
       "Multiple carriers                    1196\n",
       "SpiceJet                              818\n",
       "Vistara                               479\n",
       "Air Asia                              319\n",
       "GoAir                                 194\n",
       "Multiple carriers Premium economy      13\n",
       "Jet Airways Business                    6\n",
       "Vistara Premium economy                 3\n",
       "Trujet                                  1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Airline'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "2156a42c-7292-40c3-be96-1f77c18f6144",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15, 6))\n",
    "ax = sns.barplot(x = 'Airline', y = 'Price', data = data.sort_values('Price', ascending = False))\n",
    "ticks = ax.get_xticks()  \n",
    "ax.set_xticks(ticks)     \n",
    "ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha='right')\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "a2e7b0ff-9156-4718-8313-cc3b0851d67b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15, 6))\n",
    "ax = sns.boxplot(x = 'Airline', y = 'Price', data = data.sort_values('Price', ascending = False))\n",
    "ticks = ax.get_xticks()  \n",
    "ax.set_xticks(ticks)     \n",
    "ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha='right')\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "f0b6cbf4-7e7b-492e-86d9-2489a07a7f00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Airline</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Jet Airways Business</th>\n",
       "      <td>6.0</td>\n",
       "      <td>58358.666667</td>\n",
       "      <td>11667.596748</td>\n",
       "      <td>46490.0</td>\n",
       "      <td>52243.0</td>\n",
       "      <td>54747.0</td>\n",
       "      <td>61122.50</td>\n",
       "      <td>79512.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jet Airways</th>\n",
       "      <td>3849.0</td>\n",
       "      <td>11643.923357</td>\n",
       "      <td>4258.940578</td>\n",
       "      <td>1840.0</td>\n",
       "      <td>9134.0</td>\n",
       "      <td>11467.0</td>\n",
       "      <td>14151.00</td>\n",
       "      <td>54826.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Multiple carriers Premium economy</th>\n",
       "      <td>13.0</td>\n",
       "      <td>11418.846154</td>\n",
       "      <td>1717.153936</td>\n",
       "      <td>9845.0</td>\n",
       "      <td>10161.0</td>\n",
       "      <td>11269.0</td>\n",
       "      <td>11269.00</td>\n",
       "      <td>14629.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Multiple carriers</th>\n",
       "      <td>1196.0</td>\n",
       "      <td>10902.678094</td>\n",
       "      <td>3721.234997</td>\n",
       "      <td>5797.0</td>\n",
       "      <td>7723.0</td>\n",
       "      <td>10197.0</td>\n",
       "      <td>13587.00</td>\n",
       "      <td>36983.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Air India</th>\n",
       "      <td>1751.0</td>\n",
       "      <td>9612.427756</td>\n",
       "      <td>3901.734561</td>\n",
       "      <td>2050.0</td>\n",
       "      <td>6891.0</td>\n",
       "      <td>9443.0</td>\n",
       "      <td>12219.00</td>\n",
       "      <td>31945.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vistara Premium economy</th>\n",
       "      <td>3.0</td>\n",
       "      <td>8962.333333</td>\n",
       "      <td>2915.405518</td>\n",
       "      <td>5969.0</td>\n",
       "      <td>7547.0</td>\n",
       "      <td>9125.0</td>\n",
       "      <td>10459.00</td>\n",
       "      <td>11793.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vistara</th>\n",
       "      <td>479.0</td>\n",
       "      <td>7796.348643</td>\n",
       "      <td>2914.298578</td>\n",
       "      <td>3687.0</td>\n",
       "      <td>5403.0</td>\n",
       "      <td>7980.0</td>\n",
       "      <td>9345.00</td>\n",
       "      <td>21730.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GoAir</th>\n",
       "      <td>194.0</td>\n",
       "      <td>5861.056701</td>\n",
       "      <td>2703.585767</td>\n",
       "      <td>3398.0</td>\n",
       "      <td>3898.0</td>\n",
       "      <td>5135.0</td>\n",
       "      <td>6811.25</td>\n",
       "      <td>22794.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IndiGo</th>\n",
       "      <td>2053.0</td>\n",
       "      <td>5673.682903</td>\n",
       "      <td>2264.142168</td>\n",
       "      <td>2227.0</td>\n",
       "      <td>4226.0</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>6494.00</td>\n",
       "      <td>22153.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Air Asia</th>\n",
       "      <td>319.0</td>\n",
       "      <td>5590.260188</td>\n",
       "      <td>2027.362290</td>\n",
       "      <td>3383.0</td>\n",
       "      <td>4282.0</td>\n",
       "      <td>5162.0</td>\n",
       "      <td>6451.00</td>\n",
       "      <td>13774.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SpiceJet</th>\n",
       "      <td>818.0</td>\n",
       "      <td>4338.284841</td>\n",
       "      <td>1849.922514</td>\n",
       "      <td>1759.0</td>\n",
       "      <td>3574.5</td>\n",
       "      <td>3873.0</td>\n",
       "      <td>4760.00</td>\n",
       "      <td>23267.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Trujet</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4140.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4140.0</td>\n",
       "      <td>4140.0</td>\n",
       "      <td>4140.0</td>\n",
       "      <td>4140.00</td>\n",
       "      <td>4140.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    count          mean           std  \\\n",
       "Airline                                                                 \n",
       "Jet Airways Business                  6.0  58358.666667  11667.596748   \n",
       "Jet Airways                        3849.0  11643.923357   4258.940578   \n",
       "Multiple carriers Premium economy    13.0  11418.846154   1717.153936   \n",
       "Multiple carriers                  1196.0  10902.678094   3721.234997   \n",
       "Air India                          1751.0   9612.427756   3901.734561   \n",
       "Vistara Premium economy               3.0   8962.333333   2915.405518   \n",
       "Vistara                             479.0   7796.348643   2914.298578   \n",
       "GoAir                               194.0   5861.056701   2703.585767   \n",
       "IndiGo                             2053.0   5673.682903   2264.142168   \n",
       "Air Asia                            319.0   5590.260188   2027.362290   \n",
       "SpiceJet                            818.0   4338.284841   1849.922514   \n",
       "Trujet                                1.0   4140.000000           NaN   \n",
       "\n",
       "                                       min      25%      50%       75%  \\\n",
       "Airline                                                                  \n",
       "Jet Airways Business               46490.0  52243.0  54747.0  61122.50   \n",
       "Jet Airways                         1840.0   9134.0  11467.0  14151.00   \n",
       "Multiple carriers Premium economy   9845.0  10161.0  11269.0  11269.00   \n",
       "Multiple carriers                   5797.0   7723.0  10197.0  13587.00   \n",
       "Air India                           2050.0   6891.0   9443.0  12219.00   \n",
       "Vistara Premium economy             5969.0   7547.0   9125.0  10459.00   \n",
       "Vistara                             3687.0   5403.0   7980.0   9345.00   \n",
       "GoAir                               3398.0   3898.0   5135.0   6811.25   \n",
       "IndiGo                              2227.0   4226.0   5000.0   6494.00   \n",
       "Air Asia                            3383.0   4282.0   5162.0   6451.00   \n",
       "SpiceJet                            1759.0   3574.5   3873.0   4760.00   \n",
       "Trujet                              4140.0   4140.0   4140.0   4140.00   \n",
       "\n",
       "                                       max  \n",
       "Airline                                     \n",
       "Jet Airways Business               79512.0  \n",
       "Jet Airways                        54826.0  \n",
       "Multiple carriers Premium economy  14629.0  \n",
       "Multiple carriers                  36983.0  \n",
       "Air India                          31945.0  \n",
       "Vistara Premium economy            11793.0  \n",
       "Vistara                            21730.0  \n",
       "GoAir                              22794.0  \n",
       "IndiGo                             22153.0  \n",
       "Air Asia                           13774.0  \n",
       "SpiceJet                           23267.0  \n",
       "Trujet                              4140.0  "
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.groupby('Airline'). describe()['Price'].sort_values('mean', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "3cddc691-432c-4c9e-b482-e80b54e302d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Air India</th>\n",
       "      <th>GoAir</th>\n",
       "      <th>IndiGo</th>\n",
       "      <th>Jet Airways</th>\n",
       "      <th>Jet Airways Business</th>\n",
       "      <th>Multiple carriers</th>\n",
       "      <th>Multiple carriers Premium economy</th>\n",
       "      <th>SpiceJet</th>\n",
       "      <th>Trujet</th>\n",
       "      <th>Vistara</th>\n",
       "      <th>Vistara Premium economy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Air India  GoAir  IndiGo  Jet Airways  Jet Airways Business  \\\n",
       "0          0      0       1            0                     0   \n",
       "1          1      0       0            0                     0   \n",
       "2          0      0       0            1                     0   \n",
       "3          0      0       1            0                     0   \n",
       "4          0      0       1            0                     0   \n",
       "\n",
       "   Multiple carriers  Multiple carriers Premium economy  SpiceJet  Trujet  \\\n",
       "0                  0                                  0         0       0   \n",
       "1                  0                                  0         0       0   \n",
       "2                  0                                  0         0       0   \n",
       "3                  0                                  0         0       0   \n",
       "4                  0                                  0         0       0   \n",
       "\n",
       "   Vistara  Vistara Premium economy  \n",
       "0        0                        0  \n",
       "1        0                        0  \n",
       "2        0                        0  \n",
       "3        0                        0  \n",
       "4        0                        0  "
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Airline = pd.get_dummies(data['Airline'], drop_first = True).astype(int)\n",
    "Airline.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "5e357cf4-0679-4209-898c-2254a62222e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Price</th>\n",
       "      <th>Dep_Time_in_hour</th>\n",
       "      <th>Dep_Time_in_minute</th>\n",
       "      <th>Arrival_Time_in_hour</th>\n",
       "      <th>...</th>\n",
       "      <th>GoAir</th>\n",
       "      <th>IndiGo</th>\n",
       "      <th>Jet Airways</th>\n",
       "      <th>Jet Airways Business</th>\n",
       "      <th>Multiple carriers</th>\n",
       "      <th>Multiple carriers Premium economy</th>\n",
       "      <th>SpiceJet</th>\n",
       "      <th>Trujet</th>\n",
       "      <th>Vistara</th>\n",
       "      <th>Vistara Premium economy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>170</td>\n",
       "      <td>0</td>\n",
       "      <td>3897</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>445</td>\n",
       "      <td>2</td>\n",
       "      <td>7662</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>1140</td>\n",
       "      <td>2</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>325</td>\n",
       "      <td>1</td>\n",
       "      <td>6218</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>285</td>\n",
       "      <td>1</td>\n",
       "      <td>13302</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline    Source Destination                  Route  Duration  \\\n",
       "0       IndiGo  Banglore   New Delhi              BLR → DEL       170   \n",
       "1    Air India   Kolkata    Banglore  CCU → IXR → BBI → BLR       445   \n",
       "2  Jet Airways     Delhi      Cochin  DEL → LKO → BOM → COK      1140   \n",
       "3       IndiGo   Kolkata    Banglore        CCU → NAG → BLR       325   \n",
       "4       IndiGo  Banglore   New Delhi        BLR → NAG → DEL       285   \n",
       "\n",
       "   Total_Stops  Price  Dep_Time_in_hour  Dep_Time_in_minute  \\\n",
       "0            0   3897                22                  20   \n",
       "1            2   7662                 5                  50   \n",
       "2            2  13882                 9                  25   \n",
       "3            1   6218                18                   5   \n",
       "4            1  13302                16                  50   \n",
       "\n",
       "   Arrival_Time_in_hour  ...  GoAir  IndiGo  Jet Airways  \\\n",
       "0                     1  ...      0       1            0   \n",
       "1                    13  ...      0       0            0   \n",
       "2                     4  ...      0       0            1   \n",
       "3                    23  ...      0       1            0   \n",
       "4                    21  ...      0       1            0   \n",
       "\n",
       "   Jet Airways Business  Multiple carriers  Multiple carriers Premium economy  \\\n",
       "0                     0                  0                                  0   \n",
       "1                     0                  0                                  0   \n",
       "2                     0                  0                                  0   \n",
       "3                     0                  0                                  0   \n",
       "4                     0                  0                                  0   \n",
       "\n",
       "   SpiceJet  Trujet  Vistara  Vistara Premium economy  \n",
       "0         0       0        0                        0  \n",
       "1         0       0        0                        0  \n",
       "2         0       0        0                        0  \n",
       "3         0       0        0                        0  \n",
       "4         0       0        0                        0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.concat([data, Airline], axis = 1)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "926dd0bd-fd33-461a-a040-f1e5b7bc3e63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Price</th>\n",
       "      <th>Dep_Time_in_hour</th>\n",
       "      <th>Dep_Time_in_minute</th>\n",
       "      <th>Arrival_Time_in_hour</th>\n",
       "      <th>...</th>\n",
       "      <th>GoAir</th>\n",
       "      <th>IndiGo</th>\n",
       "      <th>Jet Airways</th>\n",
       "      <th>Jet Airways Business</th>\n",
       "      <th>Multiple carriers</th>\n",
       "      <th>Multiple carriers Premium economy</th>\n",
       "      <th>SpiceJet</th>\n",
       "      <th>Trujet</th>\n",
       "      <th>Vistara</th>\n",
       "      <th>Vistara Premium economy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>170</td>\n",
       "      <td>0</td>\n",
       "      <td>3897</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>445</td>\n",
       "      <td>2</td>\n",
       "      <td>7662</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>1140</td>\n",
       "      <td>2</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>325</td>\n",
       "      <td>1</td>\n",
       "      <td>6218</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>285</td>\n",
       "      <td>1</td>\n",
       "      <td>13302</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline    Source Destination                  Route  Duration  \\\n",
       "0       IndiGo  Banglore   New Delhi              BLR → DEL       170   \n",
       "1    Air India   Kolkata    Banglore  CCU → IXR → BBI → BLR       445   \n",
       "2  Jet Airways     Delhi      Cochin  DEL → LKO → BOM → COK      1140   \n",
       "3       IndiGo   Kolkata    Banglore        CCU → NAG → BLR       325   \n",
       "4       IndiGo  Banglore   New Delhi        BLR → NAG → DEL       285   \n",
       "\n",
       "   Total_Stops  Price  Dep_Time_in_hour  Dep_Time_in_minute  \\\n",
       "0            0   3897                22                  20   \n",
       "1            2   7662                 5                  50   \n",
       "2            2  13882                 9                  25   \n",
       "3            1   6218                18                   5   \n",
       "4            1  13302                16                  50   \n",
       "\n",
       "   Arrival_Time_in_hour  ...  GoAir  IndiGo  Jet Airways  \\\n",
       "0                     1  ...      0       1            0   \n",
       "1                    13  ...      0       0            0   \n",
       "2                     4  ...      0       0            1   \n",
       "3                    23  ...      0       1            0   \n",
       "4                    21  ...      0       1            0   \n",
       "\n",
       "   Jet Airways Business  Multiple carriers  Multiple carriers Premium economy  \\\n",
       "0                     0                  0                                  0   \n",
       "1                     0                  0                                  0   \n",
       "2                     0                  0                                  0   \n",
       "3                     0                  0                                  0   \n",
       "4                     0                  0                                  0   \n",
       "\n",
       "   SpiceJet  Trujet  Vistara  Vistara Premium economy  \n",
       "0         0       0        0                        0  \n",
       "1         0       0        0                        0  \n",
       "2         0       0        0                        0  \n",
       "3         0       0        0                        0  \n",
       "4         0       0        0                        0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "bceb2891-fa20-46e7-a709-8fa65470fd4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Price</th>\n",
       "      <th>Dep_Time_in_hour</th>\n",
       "      <th>Dep_Time_in_minute</th>\n",
       "      <th>Arrival_Time_in_hour</th>\n",
       "      <th>Arrival_Time_in_minute</th>\n",
       "      <th>...</th>\n",
       "      <th>GoAir</th>\n",
       "      <th>IndiGo</th>\n",
       "      <th>Jet Airways</th>\n",
       "      <th>Jet Airways Business</th>\n",
       "      <th>Multiple carriers</th>\n",
       "      <th>Multiple carriers Premium economy</th>\n",
       "      <th>SpiceJet</th>\n",
       "      <th>Trujet</th>\n",
       "      <th>Vistara</th>\n",
       "      <th>Vistara Premium economy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>170</td>\n",
       "      <td>0</td>\n",
       "      <td>3897</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>445</td>\n",
       "      <td>2</td>\n",
       "      <td>7662</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>1140</td>\n",
       "      <td>2</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>325</td>\n",
       "      <td>1</td>\n",
       "      <td>6218</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>285</td>\n",
       "      <td>1</td>\n",
       "      <td>13302</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Source Destination                  Route  Duration  Total_Stops  Price  \\\n",
       "0  Banglore   New Delhi              BLR → DEL       170            0   3897   \n",
       "1   Kolkata    Banglore  CCU → IXR → BBI → BLR       445            2   7662   \n",
       "2     Delhi      Cochin  DEL → LKO → BOM → COK      1140            2  13882   \n",
       "3   Kolkata    Banglore        CCU → NAG → BLR       325            1   6218   \n",
       "4  Banglore   New Delhi        BLR → NAG → DEL       285            1  13302   \n",
       "\n",
       "   Dep_Time_in_hour  Dep_Time_in_minute  Arrival_Time_in_hour  \\\n",
       "0                22                  20                     1   \n",
       "1                 5                  50                    13   \n",
       "2                 9                  25                     4   \n",
       "3                18                   5                    23   \n",
       "4                16                  50                    21   \n",
       "\n",
       "   Arrival_Time_in_minute  ...  GoAir  IndiGo  Jet Airways  \\\n",
       "0                      10  ...      0       1            0   \n",
       "1                      15  ...      0       0            0   \n",
       "2                      25  ...      0       0            1   \n",
       "3                      30  ...      0       1            0   \n",
       "4                      35  ...      0       1            0   \n",
       "\n",
       "   Jet Airways Business  Multiple carriers  Multiple carriers Premium economy  \\\n",
       "0                     0                  0                                  0   \n",
       "1                     0                  0                                  0   \n",
       "2                     0                  0                                  0   \n",
       "3                     0                  0                                  0   \n",
       "4                     0                  0                                  0   \n",
       "\n",
       "   SpiceJet  Trujet  Vistara  Vistara Premium economy  \n",
       "0         0       0        0                        0  \n",
       "1         0       0        0                        0  \n",
       "2         0       0        0                        0  \n",
       "3         0       0        0                        0  \n",
       "4         0       0        0                        0  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.drop('Airline', axis = 1, inplace = True)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9dd96f61-fe8f-4903-9a65-b2561f31e030",
   "metadata": {},
   "source": [
    "# SOURCE AND DESTINATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "2a1f932d-2d50-4dd7-adb6-af0011e5ec3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Source  \n",
      "Delhi       4536\n",
      "Kolkata     2871\n",
      "Banglore    2197\n",
      "Mumbai       697\n",
      "Chennai      381\n",
      "Name: count, dtype: int64 \n",
      "\n",
      "Destination\n",
      "Cochin         4536\n",
      "Banglore       2871\n",
      "Delhi          1265\n",
      "New Delhi       932\n",
      "Hyderabad       697\n",
      "Kolkata         381\n",
      "Name: count, dtype: int64 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "list1 = ['Source', 'Destination']\n",
    "for l in list1:\n",
    "    print(data[[l]].value_counts(), '\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "810e91ec-3c2c-44dc-8f00-8e6e6bb63552",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Route</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Price</th>\n",
       "      <th>Dep_Time_in_hour</th>\n",
       "      <th>Dep_Time_in_minute</th>\n",
       "      <th>Arrival_Time_in_hour</th>\n",
       "      <th>Arrival_Time_in_minute</th>\n",
       "      <th>Day</th>\n",
       "      <th>Month</th>\n",
       "      <th>...</th>\n",
       "      <th>Vistara Premium economy</th>\n",
       "      <th>Source_Chennai</th>\n",
       "      <th>Source_Delhi</th>\n",
       "      <th>Source_Kolkata</th>\n",
       "      <th>Source_Mumbai</th>\n",
       "      <th>Destination_Cochin</th>\n",
       "      <th>Destination_Delhi</th>\n",
       "      <th>Destination_Hyderabad</th>\n",
       "      <th>Destination_Kolkata</th>\n",
       "      <th>Destination_New Delhi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>170</td>\n",
       "      <td>0</td>\n",
       "      <td>3897</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>445</td>\n",
       "      <td>2</td>\n",
       "      <td>7662</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>1140</td>\n",
       "      <td>2</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>325</td>\n",
       "      <td>1</td>\n",
       "      <td>6218</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>285</td>\n",
       "      <td>1</td>\n",
       "      <td>13302</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Route  Duration  Total_Stops  Price  Dep_Time_in_hour  \\\n",
       "0              BLR → DEL       170            0   3897                22   \n",
       "1  CCU → IXR → BBI → BLR       445            2   7662                 5   \n",
       "2  DEL → LKO → BOM → COK      1140            2  13882                 9   \n",
       "3        CCU → NAG → BLR       325            1   6218                18   \n",
       "4        BLR → NAG → DEL       285            1  13302                16   \n",
       "\n",
       "   Dep_Time_in_minute  Arrival_Time_in_hour  Arrival_Time_in_minute  Day  \\\n",
       "0                  20                     1                      10   24   \n",
       "1                  50                    13                      15    1   \n",
       "2                  25                     4                      25    9   \n",
       "3                   5                    23                      30   12   \n",
       "4                  50                    21                      35    1   \n",
       "\n",
       "   Month  ...  Vistara Premium economy  Source_Chennai  Source_Delhi  \\\n",
       "0      3  ...                        0           False         False   \n",
       "1      5  ...                        0           False         False   \n",
       "2      6  ...                        0           False          True   \n",
       "3      5  ...                        0           False         False   \n",
       "4      3  ...                        0           False         False   \n",
       "\n",
       "   Source_Kolkata  Source_Mumbai  Destination_Cochin  Destination_Delhi  \\\n",
       "0           False          False               False              False   \n",
       "1            True          False               False              False   \n",
       "2           False          False                True              False   \n",
       "3            True          False               False              False   \n",
       "4           False          False               False              False   \n",
       "\n",
       "   Destination_Hyderabad  Destination_Kolkata  Destination_New Delhi  \n",
       "0                  False                False                   True  \n",
       "1                  False                False                  False  \n",
       "2                  False                False                  False  \n",
       "3                  False                False                  False  \n",
       "4                  False                False                   True  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.get_dummies(data = data, columns = list1, drop_first = True)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c2649a7-3cb2-41dd-af54-b1a26a3ea439",
   "metadata": {},
   "source": [
    "# ROUTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "46aaa4c5-9e37-4e77-8860-afe5272130c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Route</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BLR → DEL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Route\n",
       "0              BLR → DEL\n",
       "1  CCU → IXR → BBI → BLR\n",
       "2  DEL → LKO → BOM → COK\n",
       "3        CCU → NAG → BLR\n",
       "4        BLR → NAG → DEL"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "route = data[['Route']]\n",
    "route.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "0fb846d9-ea56-4613-994f-876df6420374",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Total_Stops\n",
       "1    5625\n",
       "0    3491\n",
       "2    1520\n",
       "3      45\n",
       "4       1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Total_Stops'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "6eacc730-334b-451b-9a20-50ed4ded4b6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Prakash\\AppData\\Local\\Temp\\ipykernel_340\\2109748827.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  route['Route_1'] = route['Route'].str.split('→').str[0]\n",
      "C:\\Users\\Prakash\\AppData\\Local\\Temp\\ipykernel_340\\2109748827.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  route['Route_2'] = route['Route'].str.split('→').str[1]\n",
      "C:\\Users\\Prakash\\AppData\\Local\\Temp\\ipykernel_340\\2109748827.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  route['Route_3'] = route['Route'].str.split('→').str[2]\n",
      "C:\\Users\\Prakash\\AppData\\Local\\Temp\\ipykernel_340\\2109748827.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  route['Route_4'] = route['Route'].str.split('→').str[3]\n",
      "C:\\Users\\Prakash\\AppData\\Local\\Temp\\ipykernel_340\\2109748827.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  route['Route_5'] = route['Route'].str.split('→').str[4]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Route</th>\n",
       "      <th>Route_1</th>\n",
       "      <th>Route_2</th>\n",
       "      <th>Route_3</th>\n",
       "      <th>Route_4</th>\n",
       "      <th>Route_5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>BLR</td>\n",
       "      <td>DEL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>CCU</td>\n",
       "      <td>IXR</td>\n",
       "      <td>BBI</td>\n",
       "      <td>BLR</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>DEL</td>\n",
       "      <td>LKO</td>\n",
       "      <td>BOM</td>\n",
       "      <td>COK</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>CCU</td>\n",
       "      <td>NAG</td>\n",
       "      <td>BLR</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>BLR</td>\n",
       "      <td>NAG</td>\n",
       "      <td>DEL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Route Route_1 Route_2 Route_3 Route_4 Route_5\n",
       "0              BLR → DEL    BLR      DEL     NaN     NaN     NaN\n",
       "1  CCU → IXR → BBI → BLR    CCU     IXR     BBI      BLR     NaN\n",
       "2  DEL → LKO → BOM → COK    DEL     LKO     BOM      COK     NaN\n",
       "3        CCU → NAG → BLR    CCU     NAG      BLR     NaN     NaN\n",
       "4        BLR → NAG → DEL    BLR     NAG      DEL     NaN     NaN"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "route['Route_1'] = route['Route'].str.split('→').str[0]\n",
    "route['Route_2'] = route['Route'].str.split('→').str[1]\n",
    "route['Route_3'] = route['Route'].str.split('→').str[2]\n",
    "route['Route_4'] = route['Route'].str.split('→').str[3]\n",
    "route['Route_5'] = route['Route'].str.split('→').str[4]\n",
    "\n",
    "route.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "2053200f-e275-4a47-abec-0c36e9475a0d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Prakash\\AppData\\Local\\Temp\\ipykernel_340\\2171952904.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  route.fillna('None', inplace = True)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Route</th>\n",
       "      <th>Route_1</th>\n",
       "      <th>Route_2</th>\n",
       "      <th>Route_3</th>\n",
       "      <th>Route_4</th>\n",
       "      <th>Route_5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>BLR</td>\n",
       "      <td>DEL</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>CCU</td>\n",
       "      <td>IXR</td>\n",
       "      <td>BBI</td>\n",
       "      <td>BLR</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>DEL</td>\n",
       "      <td>LKO</td>\n",
       "      <td>BOM</td>\n",
       "      <td>COK</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>CCU</td>\n",
       "      <td>NAG</td>\n",
       "      <td>BLR</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>BLR</td>\n",
       "      <td>NAG</td>\n",
       "      <td>DEL</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Route Route_1 Route_2 Route_3 Route_4 Route_5\n",
       "0              BLR → DEL    BLR      DEL    None    None    None\n",
       "1  CCU → IXR → BBI → BLR    CCU     IXR     BBI      BLR    None\n",
       "2  DEL → LKO → BOM → COK    DEL     LKO     BOM      COK    None\n",
       "3        CCU → NAG → BLR    CCU     NAG      BLR    None    None\n",
       "4        BLR → NAG → DEL    BLR     NAG      DEL    None    None"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "route.fillna('None', inplace = True)\n",
    "route.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "2a2661bd-87ec-4769-a43f-5f180877c0a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Prakash\\AppData\\Local\\Temp\\ipykernel_340\\2558847341.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  route[col] = le.fit_transform(route[col])\n",
      "C:\\Users\\Prakash\\AppData\\Local\\Temp\\ipykernel_340\\2558847341.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  route[col] = le.fit_transform(route[col])\n",
      "C:\\Users\\Prakash\\AppData\\Local\\Temp\\ipykernel_340\\2558847341.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  route[col] = le.fit_transform(route[col])\n",
      "C:\\Users\\Prakash\\AppData\\Local\\Temp\\ipykernel_340\\2558847341.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  route[col] = le.fit_transform(route[col])\n",
      "C:\\Users\\Prakash\\AppData\\Local\\Temp\\ipykernel_340\\2558847341.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  route[col] = le.fit_transform(route[col])\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Route</th>\n",
       "      <th>Route_1</th>\n",
       "      <th>Route_2</th>\n",
       "      <th>Route_3</th>\n",
       "      <th>Route_4</th>\n",
       "      <th>Route_5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>29</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>2</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>3</td>\n",
       "      <td>32</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Route  Route_1  Route_2  Route_3  Route_4  Route_5\n",
       "0              BLR → DEL        0       13       29       13        5\n",
       "1  CCU → IXR → BBI → BLR        2       25        1        3        5\n",
       "2  DEL → LKO → BOM → COK        3       32        4        5        5\n",
       "3        CCU → NAG → BLR        2       34        3       13        5\n",
       "4        BLR → NAG → DEL        0       34        8       13        5"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "le = LabelEncoder()\n",
    "for i in range(1, 6):\n",
    "    col = 'Route_' + str(i)\n",
    "    route[col] = le.fit_transform(route[col])\n",
    "\n",
    "route.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "155f35ca-8ef2-4e6c-8cae-25559093663a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Prakash\\AppData\\Local\\Temp\\ipykernel_340\\2499507917.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  route.drop('Route', axis = 1, inplace = True)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Route_1</th>\n",
       "      <th>Route_2</th>\n",
       "      <th>Route_3</th>\n",
       "      <th>Route_4</th>\n",
       "      <th>Route_5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>29</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>32</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Route_1  Route_2  Route_3  Route_4  Route_5\n",
       "0        0       13       29       13        5\n",
       "1        2       25        1        3        5\n",
       "2        3       32        4        5        5\n",
       "3        2       34        3       13        5\n",
       "4        0       34        8       13        5"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "route.drop('Route', axis = 1, inplace = True)\n",
    "route.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "5a477b65-6710-4df0-b137-b2d44a4c4031",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Route</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Price</th>\n",
       "      <th>Dep_Time_in_hour</th>\n",
       "      <th>Dep_Time_in_minute</th>\n",
       "      <th>Arrival_Time_in_hour</th>\n",
       "      <th>Arrival_Time_in_minute</th>\n",
       "      <th>Day</th>\n",
       "      <th>Month</th>\n",
       "      <th>...</th>\n",
       "      <th>Destination_Cochin</th>\n",
       "      <th>Destination_Delhi</th>\n",
       "      <th>Destination_Hyderabad</th>\n",
       "      <th>Destination_Kolkata</th>\n",
       "      <th>Destination_New Delhi</th>\n",
       "      <th>Route_1</th>\n",
       "      <th>Route_2</th>\n",
       "      <th>Route_3</th>\n",
       "      <th>Route_4</th>\n",
       "      <th>Route_5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>170</td>\n",
       "      <td>0</td>\n",
       "      <td>3897</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>29</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>445</td>\n",
       "      <td>2</td>\n",
       "      <td>7662</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>1140</td>\n",
       "      <td>2</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>3</td>\n",
       "      <td>32</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>325</td>\n",
       "      <td>1</td>\n",
       "      <td>6218</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>285</td>\n",
       "      <td>1</td>\n",
       "      <td>13302</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Route  Duration  Total_Stops  Price  Dep_Time_in_hour  \\\n",
       "0              BLR → DEL       170            0   3897                22   \n",
       "1  CCU → IXR → BBI → BLR       445            2   7662                 5   \n",
       "2  DEL → LKO → BOM → COK      1140            2  13882                 9   \n",
       "3        CCU → NAG → BLR       325            1   6218                18   \n",
       "4        BLR → NAG → DEL       285            1  13302                16   \n",
       "\n",
       "   Dep_Time_in_minute  Arrival_Time_in_hour  Arrival_Time_in_minute  Day  \\\n",
       "0                  20                     1                      10   24   \n",
       "1                  50                    13                      15    1   \n",
       "2                  25                     4                      25    9   \n",
       "3                   5                    23                      30   12   \n",
       "4                  50                    21                      35    1   \n",
       "\n",
       "   Month  ...  Destination_Cochin  Destination_Delhi  Destination_Hyderabad  \\\n",
       "0      3  ...               False              False                  False   \n",
       "1      5  ...               False              False                  False   \n",
       "2      6  ...                True              False                  False   \n",
       "3      5  ...               False              False                  False   \n",
       "4      3  ...               False              False                  False   \n",
       "\n",
       "   Destination_Kolkata  Destination_New Delhi  Route_1  Route_2  Route_3  \\\n",
       "0                False                   True        0       13       29   \n",
       "1                False                  False        2       25        1   \n",
       "2                False                  False        3       32        4   \n",
       "3                False                  False        2       34        3   \n",
       "4                False                   True        0       34        8   \n",
       "\n",
       "   Route_4  Route_5  \n",
       "0       13        5  \n",
       "1        3        5  \n",
       "2        5        5  \n",
       "3       13        5  \n",
       "4       13        5  \n",
       "\n",
       "[5 rows x 35 columns]"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.concat([data, route], axis = 1) \n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "dc9c3362-d3b6-442f-a694-35f6dcdae2e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Price</th>\n",
       "      <th>Dep_Time_in_hour</th>\n",
       "      <th>Dep_Time_in_minute</th>\n",
       "      <th>Arrival_Time_in_hour</th>\n",
       "      <th>Arrival_Time_in_minute</th>\n",
       "      <th>Day</th>\n",
       "      <th>Month</th>\n",
       "      <th>Air India</th>\n",
       "      <th>...</th>\n",
       "      <th>Destination_Cochin</th>\n",
       "      <th>Destination_Delhi</th>\n",
       "      <th>Destination_Hyderabad</th>\n",
       "      <th>Destination_Kolkata</th>\n",
       "      <th>Destination_New Delhi</th>\n",
       "      <th>Route_1</th>\n",
       "      <th>Route_2</th>\n",
       "      <th>Route_3</th>\n",
       "      <th>Route_4</th>\n",
       "      <th>Route_5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>170</td>\n",
       "      <td>0</td>\n",
       "      <td>3897</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>29</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>445</td>\n",
       "      <td>2</td>\n",
       "      <td>7662</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1140</td>\n",
       "      <td>2</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>3</td>\n",
       "      <td>32</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>325</td>\n",
       "      <td>1</td>\n",
       "      <td>6218</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>285</td>\n",
       "      <td>1</td>\n",
       "      <td>13302</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Duration  Total_Stops  Price  Dep_Time_in_hour  Dep_Time_in_minute  \\\n",
       "0       170            0   3897                22                  20   \n",
       "1       445            2   7662                 5                  50   \n",
       "2      1140            2  13882                 9                  25   \n",
       "3       325            1   6218                18                   5   \n",
       "4       285            1  13302                16                  50   \n",
       "\n",
       "   Arrival_Time_in_hour  Arrival_Time_in_minute  Day  Month  Air India  ...  \\\n",
       "0                     1                      10   24      3          0  ...   \n",
       "1                    13                      15    1      5          1  ...   \n",
       "2                     4                      25    9      6          0  ...   \n",
       "3                    23                      30   12      5          0  ...   \n",
       "4                    21                      35    1      3          0  ...   \n",
       "\n",
       "   Destination_Cochin  Destination_Delhi  Destination_Hyderabad  \\\n",
       "0               False              False                  False   \n",
       "1               False              False                  False   \n",
       "2                True              False                  False   \n",
       "3               False              False                  False   \n",
       "4               False              False                  False   \n",
       "\n",
       "   Destination_Kolkata  Destination_New Delhi  Route_1  Route_2  Route_3  \\\n",
       "0                False                   True        0       13       29   \n",
       "1                False                  False        2       25        1   \n",
       "2                False                  False        3       32        4   \n",
       "3                False                  False        2       34        3   \n",
       "4                False                   True        0       34        8   \n",
       "\n",
       "   Route_4  Route_5  \n",
       "0       13        5  \n",
       "1        3        5  \n",
       "2        5        5  \n",
       "3       13        5  \n",
       "4       13        5  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.drop('Route', axis = 1, inplace = True)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c93ea5c6-ccd3-421c-b313-d3fd0633e3f8",
   "metadata": {},
   "source": [
    "# Building The Machine Learning Model(s) & Evaluate Them "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "3057ab96-4134-4ab5-bc31-7c41af6c4691",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Duration', 'Total_Stops', 'Price', 'Dep_Time_in_hour', 'Dep_Time_in_minute', 'Arrival_Time_in_hour', 'Arrival_Time_in_minute', 'Day', 'Month', 'Air India', 'GoAir', 'IndiGo', 'Jet Airways', 'Jet Airways Business', 'Multiple carriers', 'Multiple carriers Premium economy', 'SpiceJet', 'Trujet', 'Vistara', 'Vistara Premium economy', 'Source_Chennai', 'Source_Delhi', 'Source_Kolkata', 'Source_Mumbai', 'Destination_Cochin', 'Destination_Delhi', 'Destination_Hyderabad', 'Destination_Kolkata', 'Destination_New Delhi', 'Route_1', 'Route_2', 'Route_3', 'Route_4', 'Route_5'] \n",
      "\n",
      "['Duration', 'Total_Stops', 'Dep_Time_in_hour', 'Dep_Time_in_minute', 'Arrival_Time_in_hour', 'Arrival_Time_in_minute', 'Day', 'Month', 'Air India', 'GoAir', 'IndiGo', 'Jet Airways', 'Jet Airways Business', 'Multiple carriers', 'Multiple carriers Premium economy', 'SpiceJet', 'Trujet', 'Vistara', 'Vistara Premium economy', 'Source_Chennai', 'Source_Delhi', 'Source_Kolkata', 'Source_Mumbai', 'Destination_Cochin', 'Destination_Delhi', 'Destination_Hyderabad', 'Destination_Kolkata', 'Destination_New Delhi', 'Route_1', 'Route_2', 'Route_3', 'Route_4', 'Route_5', 'Price'] \n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Dep_Time_in_hour</th>\n",
       "      <th>Dep_Time_in_minute</th>\n",
       "      <th>Arrival_Time_in_hour</th>\n",
       "      <th>Arrival_Time_in_minute</th>\n",
       "      <th>Day</th>\n",
       "      <th>Month</th>\n",
       "      <th>Air India</th>\n",
       "      <th>GoAir</th>\n",
       "      <th>...</th>\n",
       "      <th>Destination_Delhi</th>\n",
       "      <th>Destination_Hyderabad</th>\n",
       "      <th>Destination_Kolkata</th>\n",
       "      <th>Destination_New Delhi</th>\n",
       "      <th>Route_1</th>\n",
       "      <th>Route_2</th>\n",
       "      <th>Route_3</th>\n",
       "      <th>Route_4</th>\n",
       "      <th>Route_5</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>170</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>29</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "      <td>3897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>445</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>7662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1140</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>3</td>\n",
       "      <td>32</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>13882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>325</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "      <td>6218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>285</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "      <td>13302</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Duration  Total_Stops  Dep_Time_in_hour  Dep_Time_in_minute  \\\n",
       "0       170            0                22                  20   \n",
       "1       445            2                 5                  50   \n",
       "2      1140            2                 9                  25   \n",
       "3       325            1                18                   5   \n",
       "4       285            1                16                  50   \n",
       "\n",
       "   Arrival_Time_in_hour  Arrival_Time_in_minute  Day  Month  Air India  GoAir  \\\n",
       "0                     1                      10   24      3          0      0   \n",
       "1                    13                      15    1      5          1      0   \n",
       "2                     4                      25    9      6          0      0   \n",
       "3                    23                      30   12      5          0      0   \n",
       "4                    21                      35    1      3          0      0   \n",
       "\n",
       "   ...  Destination_Delhi  Destination_Hyderabad  Destination_Kolkata  \\\n",
       "0  ...              False                  False                False   \n",
       "1  ...              False                  False                False   \n",
       "2  ...              False                  False                False   \n",
       "3  ...              False                  False                False   \n",
       "4  ...              False                  False                False   \n",
       "\n",
       "   Destination_New Delhi  Route_1  Route_2  Route_3  Route_4  Route_5  Price  \n",
       "0                   True        0       13       29       13        5   3897  \n",
       "1                  False        2       25        1        3        5   7662  \n",
       "2                  False        3       32        4        5        5  13882  \n",
       "3                  False        2       34        3       13        5   6218  \n",
       "4                   True        0       34        8       13        5  13302  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp_col = data.columns.to_list()\n",
    "print(temp_col, '\\n')\n",
    "\n",
    "new_col = temp_col[: 2] + temp_col[3:]\n",
    "new_col.append(temp_col[2])\n",
    "print (new_col, '\\n')\n",
    "\n",
    "data = data.reindex(columns = new_col)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "a5ab4a7c-37a1-4a1b-b64c-6104fe9cb7b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.93160111, -1.22066609,  1.65415376, -0.2349499 , -1.80043628,\n",
       "       -0.8900139 ,  1.23728754, -1.46740227, -0.44278513, -0.13600489,\n",
       "        2.05015058, -0.75053033, -0.02370671, -0.35507822, -0.03490678,\n",
       "       -0.28797191, -0.00967596, -0.21667251, -0.01676082, -0.19231927,\n",
       "       -0.85909313, -0.60626609, -0.2642058 , -0.85909313, -0.36651266,\n",
       "       -0.2642058 , -0.19231927,  3.23440464, -1.67418972,  0.13765097,\n",
       "        1.39512392,  0.40974412,  0.06420744, -1.12553455])"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "scaler = StandardScaler()\n",
    "data = scaler.fit_transform(data)\n",
    "\n",
    "data[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "b1aad418-8ede-47cd-91b5-4c742b56a9b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split as tts\n",
    "\n",
    "x = data[:, : -1]\n",
    "y = data[:, -1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "5edff497-a34d-4e9c-aada-33b0dc08b523",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(9613, 33)\n",
      "(1069, 33)\n",
      "(9613, 33)\n",
      "(1069,)\n"
     ]
    }
   ],
   "source": [
    "x_train, x_test, y_train, y_test = tts(x, y, test_size = 0.1, random_state = 69)\n",
    "\n",
    "print(x_train.shape)\n",
    "print(x_test.shape)\n",
    "print(x_train.shape)\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "653f30f8-fee6-4157-b4b9-1e8c6778ace1",
   "metadata": {},
   "source": [
    "# LINEAR REGRATION \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "1d0b930e-ea27-4bf6-b8bc-57a7ac761077",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "model = LinearRegression()\n",
    "model.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "546778f4-6927-4abd-a0a6-05587b408b92",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "\n",
    "def metrics(y_true, y_pred):\n",
    "    print(f'RMSE:', mean_squared_error(y_true, y_pred) ** 0.5)\n",
    "    print(f'R_squared value:', r2_score(y_true, y_pred))\n",
    "\n",
    "def accuracy(y_true, y_pred):\n",
    "    error = abs(y_true - y_pred)\n",
    "    mape = 100 * np.mean(error/y_true)\n",
    "    accuracy = 100 - mape\n",
    "    return accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "0b7d6040-a590-476c-b893-2c3f43f28ccb",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "5b4aff06-55c9-4111-8bf8-207e9fff0410",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 0.5321162379189209\n",
      "R_squared value: 0.6513979045879806\n"
     ]
    }
   ],
   "source": [
    "metrics(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "26d384eb-fce3-4b64-8aa1-eebc1057ba15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.float64(72.5357575633238)"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad29966f-b6b7-4d1e-b27f-f0471189b44f",
   "metadata": {},
   "source": [
    "# Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "317cde7c-df4a-4283-89f6-c8bc11764009",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-4 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-4 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-4 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-4 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-4 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(min_samples_split=3, n_estimators=500)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestRegressor</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(min_samples_split=3, n_estimators=500)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor(min_samples_split=3, n_estimators=500)"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "model_random_forest = RandomForestRegressor(n_estimators = 500, min_samples_split = 3)\n",
    "model_random_forest.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "0e07d0c4-82cd-4efa-8474-bd3364f73ef8",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_rf = model_random_forest.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "168dac0c-83ed-40bc-a9e6-04fad4e1e909",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 0.37397579389829544\n",
      "R_squared value: 0.8278115744393035\n"
     ]
    }
   ],
   "source": [
    "metrics(y_test, pred_rf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "dd84ff50-1a13-4be7-a4f3-4ad45b7b0346",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.float64(97.21791421111391)"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy(y_test, pred_rf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "1b95b0f8-9d66-441e-bc51-9dfcb6e96ad3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['model.pkl']"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "joblib.dump(model, 'model.pkl')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "9f17f1dd-38b0-42d7-83c4-8ce6cbf99768",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[NbConvertApp] Converting notebook Flight ticket price prediction project1.ipynb to script\n",
      "[NbConvertApp] Writing 6886 bytes to Flight ticket price prediction project1.py\n"
     ]
    },
   "source": [
    "!jupyter nbconvert --to script \"Flight ticket price prediction project1.ipynb\"\n"
   ]
  },
  {
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
